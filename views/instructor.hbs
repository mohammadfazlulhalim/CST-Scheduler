<h1>{{title}}</h1>
<!--If term entries are defined, we add in a table-->
{{#if instructorList}}
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Instructor Number</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Actions</th>
        </tr>
        </thead>
        <!--Here is where I loop through my array object and add in a <tr> for each loop, and a <td> for each object-->
        <tbody >
        {{#each instructorList}}
            <tr>
                <td id="{{this.instructorID}}number">{{this.instructorID}}</td>
                <td id="{{this.instructorID}}firstName">{{this.firstName}}</td>
                <td id="{{this.instructorID}}lastName">{{this.lastName}}</td>
                <td>
                    <button id="{{this.instructorID}}edit" type="button" class="btn btn-primary editButton" data-toggle="modal" data-target="#editModal">Edit</button>
                    <button id="{{this.instructorID}}delete" type="button" class="btn btn-danger deleteButton" data-toggle="modal" data-target="#deleteModal">Delete</button>
                </td>
            </tr>
        {{/each}}
        </tbody>

    </table>

    <!-- Delete Modal -->
    <div class="modal fade" id="deleteModal" role="dialog" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addModalLabel">Delete Instructor</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <form action="/instructor" method="POST">
                    <div class="modal-body">
                        <p>Are you sure you want to delete this instructor?</p>
                    </div>

                    <input type="text" id="deleteInstructorID" name="instructorID" hidden />

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="button" id="deleteInstructor" class="btn btn-outline-danger">Delete</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Modal -->
    <div class="modal fade" id="editModal" role="dialog" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addModalLabel">Edit Existing Instructor</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <form action="/term" method="POST">
                    <div class="modal-body">
                        <label for="eTermNumber">Term Number:</label>
                        <input type="number" min="{{minTerms}}" max="{{maxTerms}}" class="form-control {{#if putErr.termNumber}}is-invalid{{/if}}" id="eTermNumber"
                               name="termNumber" value="{{putSubmittedTerm.termNumber}}">
                        <div class="invalid-feedback">{{putErr.termNumber}}</div>

                        <label for="eStartDate">Start Date:</label>
                        <input type="date" class="form-control {{#if putErr.startDate}}is-invalid{{/if}}" id="eStartDate"
                               name="startDate" value="{{putSubmittedTerm.startDate}}">
                        <div class="invalid-feedback">{{putErr.startDate}}</div>

                        <label for="eEndDate">End Date:</label>
                        <input type="date" class="form-control {{#if putErr.endDate}}is-invalid{{/if}}" id="eEndDate"
                               name="endDate" value="{{putSubmittedTerm.endDate}}">
                        <div class="invalid-feedback">{{putErr.endDate}}</div>

                        <input type="text" id="editID" name="id" hidden />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="button" id="editInstructor" class="btn btn-outline-success">Save</button>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <!--    If term entries are not defined we display an error message telling us no terms are stored-->
{{else}}
    <p>There are no terms stored</p>
{{/if}}

<button type="button" class="btn btn-outline-success" data-toggle="modal" data-target="#addModal">New</button>

<!-- Add Modal - must be displayed even if no terms exist -->
<div class="modal fade" id="addModal" role="dialog" tabindex="-1" aria-labelledby="addModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addModalLabel">Create New Instructor</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form action="/term" method="POST">
                <div class="modal-body">
                    <label for="cTermNumber">Term Number:</label>
                    <input type="number" min="{{minTerms}}" max="{{maxTerms}}" class="form-control {{#if err.termNumber}}is-invalid{{/if}}" id="cTermNumber"
                           name="termNumber" value="{{submittedTerm.termNumber}}">
                    <div class="invalid-feedback">{{err.termNumber}}</div>

                    <label for="cStartDate">Start Date:</label>
                    <input type="date" class="form-control {{#if err.startDate}}is-invalid{{/if}}" id="cStartDate"
                           name="startDate" value="{{submittedTerm.startDate}}">
                    <div class="invalid-feedback">{{err.startDate}}</div>

                    <label for="cEndDate">End Date:</label>
                    <input type="date" class="form-control {{#if err.endDate}}is-invalid{{/if}}" id="cEndDate"
                           name="endDate" value="{{submittedTerm.endDate}}">
                    <div class="invalid-feedback">{{err.endDate}}</div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" id="createTerm" class="btn btn-outline-success">Create</button>
                </div>
            </form>
        </div>
    </div>
</div>

<a href="http://localhost:3000/administration"><button class="btn btn-success">Go Back</button></a>

<!-- My own handlers for the form submits -->
<script>
    "use strict";

    reLinkButtons();

    /**
     * This function links the buttons on the page to their appropriate handlers
     */
    function reLinkButtons() {
        $("#createInstructor").click(handleCreateInstructor);
        $("#deleteInstructor").click(handleDeleteInstructor);
        $("#editInstructor").click(handleEditInstructor);
        $(".deleteButton").click(function () {
            handleDeleteModal(this.instructorID.replace("delete", ""));
        });
        $(".editButton").click(function () {
            handleEditModal(this.instructorID.replace("edit", ""))
        });
    }

    /**
     * This function handles what happens when a user clicks the "create" button
     * in the Create New Term modal
     * @returns {Promise<void>}
     */
    async function handleCreateInstructor() {
        // send a POST request to the router
        const response = await fetch("http://localhost:3000/term", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                // use the val() method to get the value of a form input
                termNumber: $("#cTermNumber").val(),
                startDate: $("#cStartDate").val(),
                endDate: $("#cEndDate").val(),
            }),
        });

        // get the HTML text response
        const data = await response.text();
        const modal = "#addModal";

        loadResponse(modal, data, !response.ok);
    }

    /**
     * This function handles what happens when a user clicks the "Delete" button
     * in the Delete Term modal
     * @returns {Promise<void>}
     */
    async function handleDeleteInstructor() {
        // send a DELETE request to the router
        const response = await fetch("http://localhost:3000/instructor", {
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                // use the val() method to get the value of a form input
                instructorID: $("#deleteInstructorID").val(),
            }),
        });

        // get the HTML text response
        const data = await response.text();
        const modal = "#deleteModal";

        loadResponse(modal, data, !response.ok);
    }

    /**
     * This function handles what happens when a user clicks the "Save" button
     * in the Edit Existing Term modal
     * @returns {Promise<void>}
     */
    async function handleEditInstructor() {
        const id = $("#editID").val();
        // send a PUT request to the router
        const response = await fetch("http://localhost:3000/term", {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                // use the val() method to get the value of a form input
                termNumber: $("#eTermNumber").val(),
                startDate: $("#eStartDate").val(),
                endDate: $("#eEndDate").val(),
                id,
            }),
        });

        // get the HTML text response
        const data = await response.text();
        const modal = "#editModal";

        loadResponse(modal, data, !response.ok);

        // re-load the ID
        handleEditModal(id);
    }

    /**
     * This function loads a hidden form input in the delete modal with the ID of the term to delete
     * @param idToDelete    - The ID of the term to delete
     */
    function handleDeleteModal(idToDelete) {
        $("#deleteInstructor").val(idToDelete);
    }

    /**
     * This function loads the form in the Edit Existing Term modal with the information
     * of the term the user wants to edit
     * @param idToEdit    - The ID of the term being edited
     */
    function handleEditModal(idToEdit) {
        $("#editID").val(idToEdit);
        $("#eTermNumber").val($(`#${idToEdit}number`).text());
        $("#eStartDate").val($(`#${idToEdit}start`).text());
        $("#eEndDate").val($(`#${idToEdit}end`).text());
    }

    /**
     * As the server gives responses in HTML, the client needs to be able to parse that data.
     * This function replaces the HTML of the current page with the new HTML from the server
     * and pops up the last used modal if there were errors.
     * @param modalID   - The HTML id of the modal to pop up
     * @param data      - The HTML response from the server
     * @param showModal - True to show the modal, false to hide the modal
     */
    function loadResponse(modalID, data, showModal) {
        // set the whole document's HTML to be the response
        document.documentElement.innerHTML = data;
        // re-add the click handlers
        reLinkButtons();
        // refresh the modal
        const modal = $(modalID);
        modal.modal("hide");

        // if the response was not ok, pop up the modal
        if (showModal) {
            modal.modal("show");
        }
    }
</script>
