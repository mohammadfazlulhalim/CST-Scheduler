<div id="entirePageBody">
    <div id="scheduleModal" class="modal fade" role="dialog" tabindex="-1" aria-labelledby="scheduleModalLabel"
         aria-hidden="false">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Select Filters For Schedule</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form action="/schedule" method="POST">
                        <div class="mb-3">
                            <label for="termSelect" class="form-label">Term: </label>
                            <select id="termSelect" name="term" onchange="checkEnable()" class="form-select">
                                <option id="blankTerm"></option>
                                {{#each terms}}
                                    <option value="{{id}}">{{title}}</option> <!-- fix date in get -->
                                {{/each}}
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="programSelect" class="form-label">Program: </label>
                            <select id="programSelect" name="program" onchange="checkEnable()" class="form-select">
                                <option id="blankProgram"></option>
                                {{#each programs}}
                                    <option value="{{id}}">{{programAbbreviation}}</option>
                                {{/each}}
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="groupSelect" class="form-label">Number of Groups: </label>
                            <select id="groupSelect" name="group" onchange="checkEnable()" class="form-select">
                                <option id="blankGroup"></option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary" disabled id="modalSubmit">Enter</button>
                    </form>
                </div>
            </div>
        </div>
    </div>


    <div class="container-fluid" {{#if isHidden}}hidden{{/if}}>
        <div class="column">
            <button class="btn btn-success">A</button>
            <button class="btn btn-outline-success">B</button>
            <button class="btn btn-outline-success">C</button>
            <button class="btn btn-outline-success">D</button>
        </div>
        {{#each groups}}
            <div class="container">
                <p>Overall Range: {{schedule.startDate}} to {{schedule.endDate}}</p>
                <div class="row">
                    {{#each schedule.split}}
                        <p>Table Range: {{startDate}} to {{endDate}}</p>
                        <div class="col-md-8">
                            <table class="table table-bordered table-hover border-dark">
                                {{#each tableRows}}
                                    <tr>
                                        {{#each this}}
                                            <td>{{this}}</td>
                                        {{/each}}
                                    </tr>
                                {{/each}}
                            </table>
                        </div>
                        <div class="col-md-4">
                            <h1>Course Offerings</h1>
                            <div class="d-flex flex-column" role="group" aria-label="Course offerings">
                                {{#each COArray}}
                                    <button class="btn mb-2 btn-outline-success">
                                        <span>{{this.name}}</span>
                                        <span>{{this.primaryInstructor.lastName}}</span>
                                        <span>{{this.CourseId.courseName}}</span>
                                    </button>
                                {{/each}}
                            </div>
                        </div>
                    {{/each}}
                </div>
            </div>
        {{/each}}


        <a href="http://localhost:3000" class="btn btn-success mt-3">Return</a>
    </div>
</div>
<script>
    'use strict';

    let currCO = null;
    let currDOM = null;

    window.onload = function () {
        const modal = new bootstrap.Modal(document.getElementById('scheduleModal'));
        {{#if getrequest}}
            modal.show();
        {{else}}
            changeGroup('A');
        {{/if}}

    };

    function checkEnable() {
        let bTermSelected = document.getElementById('termSelect').value !== '';
        let bProgramSelected = document.getElementById('programSelect').value !== '';
        let bGroupSelected = document.getElementById('groupSelect').value !== '';

        if (bTermSelected && bProgramSelected && bGroupSelected) {
            localStorage.setItem('PostData', JSON.stringify({
                term: document.getElementById('termSelect').value,
                program: document.getElementById('programSelect').value,
                group: document.getElementById('groupSelect').value
            }));
            document.getElementById('modalSubmit').removeAttribute('disabled');
        } else {
            document.getElementById('modalSubmit').disabled = 'disabled';
        }
    }

    function changeGroup(group) {
        // Disable all groups
        hideAllGroups();
        // enable the current one
        document.getElementById('group' + group).removeAttribute('hidden');
        document.getElementById('btn' + group).setAttribute('class', 'btn btn-primary');

    }

    function hideAllGroups() {
        {{#each groupArray}}
            document.getElementById("group{{groupLetter}}").setAttribute('hidden', '');
            document.getElementById("btn{{groupLetter}}").setAttribute('class', 'btn btn-secondary');
        {{/each}}

    }

    /**
     * onclick handler for course offerings
     * @param idCO
     */
    function onCOClick(idCO, domObj) {
        //retrieving DOM objects by id
        const objCO = document.getElementById(domObj);
        const currObjCO = document.getElementById(currDOM)

        if (currCO === idCO) //if clicked CO is alreaady highlighted
        {
            objCO.removeAttribute('class', 'card bg-info mb-3 course-offering');
            objCO.setAttribute('class', 'card bg-secondary mb-3 course-offering');
            currCO = null;
            currDOM = null;
        } else {
            if (currCO !== null) { // if there's a differnt CO highlighted, otherwise its jusst null
                currObjCO.removeAttribute('class', 'card bg-info mb-3 course-offering');
                currObjCO.setAttribute('class', 'card bg-secondary mb-3 course-offering');
            }
            objCO.removeAttribute('class', 'card bg-secondary mb-3 course-offering');
            objCO.setAttribute('class', 'card bg-info mb-3 course-offering');
            currCO = idCO;
            currDOM = domObj;
        }
    }

    async function onCellClick(idCell, tSlot, cellCO) {
        if (currCO) {
            //if not blank
            if (tSlot) {
                //If the selected CO is not the same as the current CO
                if (cellCO !== currCO) {
                    await fetch('/schedule', {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': "application/json"
                        },
                        body: JSON.stringify({id: tSlot}),
                    })
                } else { // timeslots are the same
                    return;
                }
            }
            try {
                const response = await fetch('/schedule', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        idCell: idCell,
                        CO: currCO
                    }),
                });

                if (!response.ok) {
                    throw new Error('Failed to update schedule');
                }

                const data = await response.json();
                // Access retTSlot data here

                addTSToCell(idCell, data.retTSlot, data.xtraInfo);
            } catch (error) {
                // Handle errors
                console.error('Error updating schedule:', error);
            }


        }
        await fetchAndUpdateContent();
    }


    function addTSToCell(idCell, tSlot, xtraInfo) {
        let oldTD = document.getElementById(idCell);

        let newTD = "<td class=\"text-center\" oncontextmenu=\"onCellRightClick('" + idCell + "', '" + tSlot.id + "', '" + tSlot.CourseOfferingId + "')\" " +
                "onclick=\"onCellClick('" + idCell + "', '" + tSlot.id + "', '" + tSlot.CourseOfferingId + "')\" " +
                "id=\"" + idCell + "\">" +
                "<p>" + xtraInfo.program + "<br/></p>" +
                "<p>" + xtraInfo.course + "<br/></p>" +
                "<p>" + xtraInfo.insLast + "<br/></p>" +
                "</td>";

        oldTD.outerHTML = newTD;
    }

    async function onCellRightClick(idCell, tSlot, cellCO) {
        await fetch('/schedule', {
            method: 'DELETE',
            headers: {
                'Content-Type': "application/json"
            },
            body: JSON.stringify({id: tSlot}),
        })

        let oldTD = document.getElementById(idCell);
        let newTD = "<td class='empty text-center' nu=\"onCellRightClick('" + idCell + "', '" + "" + "', '" + "" + "')\" " +
                "onclick=\"onCellClick('" + idCell + "', '" + "" + "', '" + "" + "')\" " +
                "id=\"" + idCell + "\">" +
                "<p><br/></p>" +
                "<p><br/></p>" +
                "<p><br/></p>" +
                "</td>";
        oldTD.outerHTML = newTD;

        await fetchAndUpdateContent();

    }

    async function fetchAndUpdateContent() {
        let postData = JSON.parse(localStorage.getItem('PostData'))
        const response = await fetch('/schedule', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                term: postData.term,
                group: postData.group,
                program: postData.program,
            })
        });


        if (!response.ok) {
            throw new Error('Failed to fetch updated schedule');
        }

        const htmlString = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlString, 'text/html');
        const newBodyContent = doc.getElementById('entirePageBody').innerHTML;
        console.log(newBodyContent);
        try {
            document.getElementById('entirePageBody').innerHTML = newBodyContent;
        } catch (error) {
            console.error('Error setting innerHTML:', error);
        }
    }

</script>
