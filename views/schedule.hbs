<div id="entirePageBody">
    <div id="scheduleModal" class="modal fade" role="dialog" tabindex="-1" aria-labelledby="scheduleModalLabel"
         aria-hidden="false">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Select Filters For Schedule</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form action="/schedule" method="POST">
                        <div class="mb-3">
                            <label for="termSelect" class="form-label">Term: </label>
                            <select id="termSelect" name="term" onchange="checkEnable()" class="form-select">
                                <option id="blankTerm"></option>
                                {{#each terms}}
                                    <option value="{{id}}">{{this.calendarYear}} - Term {{this.termNumber}}</option>
                                {{/each}}
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="programSelect" class="form-label">Program: </label>
                            <select id="programSelect" name="program" onchange="checkEnable()" class="form-select">
                                <option id="blankProgram"></option>
                                {{#each programs}}
                                    <option value="{{id}}">{{programAbbreviation}}</option>
                                {{/each}}
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="groupSelect" class="form-label">Number of Groups: </label>
                            <select id="groupSelect" name="group" onchange="checkEnable()" class="form-select">
                                <option id="blankGroup"></option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary" disabled id="modalSubmit">Enter</button>
                    </form>
                </div>
            </div>
        </div>
    </div>


    <div class="container-fluid" {{#if isHidden}}hidden{{/if}}>
        <div id="groupButtons" class="d-flex mx-5">
        {{#each groupLetters}}
            <button id="{{this}}button" class="btn {{#if @first}}btn-success{{else}}btn-outline-success{{/if}} groupButtons ms-2" onclick="onGroupClick({{this}})">{{this}}</button>
        {{/each}}
        </div>
        {{#each groups}}
            <div id="{{groupLetter}}" class="container groups {{#unless @first}}visually-hidden{{/unless}}">
                <p class="mb-5">Overall Range: <strong>{{schedule.startDate}}</strong> to <strong>{{schedule.endDate}}</strong></p>
                <div class="row">
                    <div id="scheduleCarousel{{@index}}" class="carousel slide" data-bs-interval="false">
                        <button id="next{{groupLetter}}" class="carousel-control-prev custom-carousel-control" type="button" data-bs-target="#scheduleCarousel{{@index}}" data-bs-slide="prev" onclick="onCarouselArrowClick()">
                            <span class="carousel-control-prev-icon custom-carousel-control-icon" aria-hidden="true"></span>
                        </button>
                        <button id="prev{{groupLetter}}" class="carousel-control-next custom-carousel-control" type="button" data-bs-target="#scheduleCarousel{{@index}}" data-bs-slide="next" onclick="onCarouselArrowClick()">
                            <span class="carousel-control-next-icon custom-carousel-control-icon" aria-hidden="true"></span>
                        </button>
                        <div class="carousel-inner">
                            {{#each schedule.split}}
                                <div id="carousel{{../groupLetter}}{{@../index}}{{@index}}" class="carousel-item carousels {{../groupLetter}} {{#if @first}}active first{{/if}}">
                                    <p>Table Range: <strong>{{startDate}}</strong> to <strong>{{endDate}}</strong></p>
                                    <div class="row"> <!-- Ensure this row is here to contain the columns properly -->
                                        <div class="col-md-8">
                                            <table class="table table-bordered table-hover border-dark scrollable-container table-sm">
                                                {{#each tableRows}}
                                                    <tr>
                                                        {{#each this}}
                                                            <td id="{{@../../../index}}{{@../../index}}{{@../index}}{{@index}}" oncontextmenu="onRightClick('{{this.id}}')" onclick="onTSClick({{@../../../index}},{{@../../index}}, {{@../index}}, {{@index}})">
                                                                <p>{{#if this.course.courseName}}{{this.course.courseName}}{{else}}{{this.dateTime}}{{/if}}</p>
                                                                <p>{{this.primaryInstructor.lastName}}{{#if
                                                                        this.alternativeInstructor.lastName}}{{this.alternativeInstructor.lastName}}{{/if}}</p>
                                                                <p>{{this.classroom.roomNumber}}</p>
                                                            </td>
                                                        {{/each}}
                                                    </tr>
                                                {{/each}}
                                            </table>
                                        </div>
                                        <div class="col-md-4">
                                            <label for="classroomSelect{{@../index}}{{@index}}" class="form-label">Current Classroom:</label>
                                            <select class="mb-5 classroomSelect form-select" id="classroomSelect{{@../index}}{{@index}}" onchange="updateDropdowns(this.value)">
                                                {{#each ../../classrooms}}
                                                    <option value="{{id}}">{{roomNumber}}</option>
                                                {{/each}}
                                            </select>
                                            <h1>Course Offerings</h1>
                                            <div class="d-flex flex-column overflow-auto py-2" role="group"
                                                 aria-label="Course offerings" style="max-height: 800px;">
                                                {{#each COArray}}
                                                    <button id="{{this.id}}{{@../index}}"
                                                            onclick="onCOClick({{this.id}}, {{this.id}}{{@../index}})"
                                                            class="COButtons btn btn-outline-success mb-2 d-flex flex-column justify-content-center py-3 align-items-center"
                                                            style="min-height: 100px;">
                                                        <span class="btn-custom-content text-center h5"><strong>{{this.name}}</strong></span>
                                                        <span class="btn-custom-content text-center">Primary Instructor: <strong> {{this.primaryInstructor.lastName}} </strong></span>
                                                        <span class="btn-custom-content text-center">{{#if
                                                                this.alternativeInstructor.lastName}}
                                                            Alternative Instructor:{{this.alternativeInstructor.lastName}}{{else}}
                                                            &nbsp;{{/if}}</span>
                                                        <span class="btn-custom-content text-center">Range: <strong>{{this.startDate}}</strong> to <strong>{{this.endDate}}</strong></span>
                                                    </button>
                                                {{/each}}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            {{/each}}
                        </div>
                    </div>
                </div>
            </div>
        {{/each}}



        <a href="http://localhost:3000" class="mx-5 btn btn-success mt-3">Return</a>
    </div>
</div>
<script>
    'use strict';
    let currentCOID;

    let currCO = null;
    let currDOM = null;

    window.onload = function () {
        const modal = new bootstrap.Modal(document.getElementById('scheduleModal'));
        {{#if getrequest}}
            modal.show();
        {{else}}
            // changeGroup('A');
        {{/if}}

    };

    function updateDropdowns(selectedValue) {
        const dropdowns = document.querySelectorAll('.classroomSelect');
        dropdowns.forEach((dropdown) => {
            dropdown.value = selectedValue;
        });
    }





    function checkEnable() {
        let bTermSelected = document.getElementById('termSelect').value !== '';
        let bProgramSelected = document.getElementById('programSelect').value !== '';
        let bGroupSelected = document.getElementById('groupSelect').value !== '';

        if (bTermSelected && bProgramSelected && bGroupSelected) {
            localStorage.setItem('PostData', JSON.stringify({
                term: document.getElementById('termSelect').value,
                program: document.getElementById('programSelect').value,
                group: document.getElementById('groupSelect').value
            }));
            document.getElementById('modalSubmit').removeAttribute('disabled');
        } else {
            document.getElementById('modalSubmit').disabled = 'disabled';
        }
    }

    async function onRightClick(tsID) {

        await fetch('/schedule', {
            method: 'DELETE',
            headers: {
                'Content-Type': "application/json"
            },
            body: JSON.stringify({tsID,}),
        })

        await fetchAndUpdateContent();

    }

    async function fetchAndUpdateContent() {
        let selectedButton = document.querySelector('button.groupButtons.btn-success').id;
        let selectedGroup = document.querySelector('div.groups:not(.visually-hidden)').id;
        let currentCarousels = document.querySelectorAll('div.carousels.active');
        let highlightedButton;
        if (document.querySelector('button.COButtons.btn-success')) {
             highlightedButton = document.querySelector('button.COButtons.btn-success').id;
        }
        let carouselIds = [];
        currentCarousels.forEach(e => {
            carouselIds.push(e.id);
        })
        let postData = JSON.parse(localStorage.getItem('PostData'))
        const response = await fetch('/schedule', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                term: postData.term,
                group: postData.group,
                program: postData.program,
            })
        });


        if (!response.ok) {
            throw new Error('Failed to fetch updated schedule');
        }
        const htmlString = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlString, 'text/html');
        const newBodyContent = doc.getElementById('entirePageBody').innerHTML;
        try {
            document.getElementById('entirePageBody').innerHTML = newBodyContent;
        } catch (error) {
            console.error('Error setting innerHTML:', error);
        }

        let buttons = document.querySelectorAll('.groupButtons');
        let carousels = document.querySelectorAll('.carousels');
        let groups = document.querySelectorAll('.groups');

        buttons.forEach((button) => {
            button.classList.remove('btn-success');
            button.classList.add('btn-outline-success');
        });

        carousels.forEach(carousel => {
            carousel.classList.remove('active');
        });

        groups.forEach(group => {
            group.classList.add('visually-hidden');
        });


        document.getElementById(selectedGroup).classList.remove('visually-hidden');
        document.getElementById(selectedButton).classList.add('btn-success');
        document.getElementById(selectedButton).classList.remove('btn-outline-success');

        if (document.getElementById(highlightedButton)) {
            document.getElementById(highlightedButton).classList.add('btn-success');
            document.getElementById(highlightedButton).classList.remove('btn-outline-success');
        } else {
            currentCOID = null;
        }



            carouselIds.forEach(carousel => {
                if(document.getElementById(carousel)) {
                    document.getElementById(carousel).classList.add('active');
                } else {
                    const firstCarousel = carousel.slice(0,10)+'0';
                    document.getElementById(firstCarousel).classList.add('active');
                }

            })



    }

    function onCOClick(COId, button) {
        if (currentCOID === COId) {
            currentCOID = null;
            removeHighlights();
        } else {
            currentCOID = COId;
            removeHighlights();
            document.getElementById(button).classList.remove('btn-outline-success');
            document.getElementById(button).classList.add('btn-success');
        }

    }

    function onCarouselArrowClick() {
        currentCOID = null;
        removeHighlights();
    }


    function onGroupClick(groupLetter) {
        const buttons = document.querySelectorAll('.groupButtons');
        buttons.forEach((button) => {
            button.classList.remove('btn-success');
            button.classList.add('btn-outline-success');
        });
        const allGroups = document.querySelectorAll('.groups');
        allGroups.forEach((groups) => {
            groups.classList.add('visually-hidden');
        });
        document.getElementById(groupLetter.id+'button').classList.add('btn-success');
        document.getElementById(groupLetter.id+'button').classList.remove('btn-outline-success');
        groupLetter.classList.remove('visually-hidden');
    }

    async function onTSClick(groupIndex, tableIndex, rowIndex, itemIndex) {
        const classroom = document.getElementById('classroomSelect00').value;
        // const cell = document.getElementById(`${groupIndex}${tableIndex}${rowIndex}${itemIndex}`);
        // let pElement = cell.querySelector('p');
        // let isEmpty = false; // Assume not empty by default
        // if (pElement) {
        //     // Check if the <p> is visually empty (including whitespace-only scenarios)
        //     if (pElement.innerText.trim() === '') {
        //         isEmpty = true;
        //     }
        // }
        if (currentCOID && rowIndex !== 0 && itemIndex !== 0) {
            try {
                await fetch('/schedule', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        dayOfWeek: itemIndex,
                        timeIndex: rowIndex,
                        COId: currentCOID,
                        group: groupIndex,
                        classroom: classroom
                    }),
                });
            } catch (error) {
                console.error("Fetch error:", error);
            }
            await fetchAndUpdateContent();
        }

    }


    function removeHighlights() {
        const buttons = document.querySelectorAll('.COButtons');
        buttons.forEach((button) => {
            button.classList.remove('btn-success');
            button.classList.add('btn-outline-success');
        });
    }
</script>

<style>

    .scrollable-container {
        max-height: 400px; /* Adjust based on your needs */
        overflow-y: auto;
    }

    .custom-carousel-control {
        color: black;
    }

    .carousel-control-prev-icon, .carousel-control-next-icon {
        background-color: black;
    }

    .carousel-control-prev.custom-carousel-control {
        left: -150px;
    }

    .carousel-control-next.custom-carousel-control {
        right: -150px;
    }


</style>
