<div>
    <div id="scheduleModal" class="modal fade" role="dialog" tabindex="-1" aria-labelledby="scheduleModalLabel"
         aria-hidden="false">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Select Filters For Schedule</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form action="/schedule" method="POST">
                        <div class="mb-3">
                            <label for="termSelect" class="form-label">Term: </label>
                            <select id="termSelect" name="term" onchange="checkEnable()" class="form-select">
                                <option id="blankTerm"></option>
                                {{#each terms}}
                                    <option value="{{id}}">{{title}}</option> <!-- fix date in get -->
                                {{/each}}
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="programSelect" class="form-label">Program: </label>
                            <select id="programSelect" name="program" onchange="checkEnable()" class="form-select">
                                <option id="blankProgram"></option>
                                {{#each programs}}
                                    <option value="{{id}}">{{programAbbreviation}}</option>
                                {{/each}}
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="groupSelect" class="form-label">Number of Groups: </label>
                            <select id="groupSelect" name="group" onchange="checkEnable()" class="form-select">
                                <option id="blankGroup"></option>
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary" disabled id="modalSubmit">Enter</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div id="main">
        <!--change this to a loop later-->
        <div id="tabBar">
            {{#each groupArray}}
                <button id="btn{{groupLetter}}" onclick="changeGroup('{{groupLetter}}')" class=" btn btn-primary">
                    Group {{groupLetter}}</button>

            {{/each}}
        </div>
        {{#each groupArray}}
            <div id="group{{groupLetter}}" class="row" hidden>
                <div id="calender{{groupLetter}}" class="col-md-8">
                    <h2>Group {{groupLetter}} Calendar</h2>
                    <table class="table table-bordered bordered-dark">
                        <thead class="thead-dark">
                        <th scope="col" id="time">
                            Time
                        </th>
                        <th scope="col" id="mon">
                            Monday
                        </th>
                        <th scope="col" id="tues">
                            Tuesday
                        </th>
                        <th scope="col" id="wed">
                            Wednesday
                        </th>
                        <th scope="col" id="thurs">
                            Thursday
                        </th>
                        <th scope="col" id="fri">
                            Friday
                        </th>
                        </thead>
                        <tr>
                        </tr>
                        {{#each timeslotMatrix }}
                            <!--loops each timeslot, outer loop is hours, inner loop is days  -->
                            <tr>
                                {{#each this}}
                                    <!--                                    Do an if/else if it has data - bool created in router-->
                                    <!--                                    Then the 'each' will have different attributes and be loaded differently-->
                                    <!--                                    via html and the router sends attributes-->
                                    {{#if this.hTime}}
                                        <td id="{{this.cellID}}">
                                            <p>{{this.hTime}}</p>
                                        </td>
                                    {{else}}
                                        <td oncontextmenu="onCellRightClick('{{this.cellID}}', '{{this.timeslot.id}}', '{{this.timeslot.co}}')"
                                            onclick="onCellClick('{{this.cellID}}', '{{this.timeslot.id}}', '{{this.timeslot.co}}')"
                                            id="{{this.cellID}}">
                                            <p>{{this.timeslot.program}}<br/></p>
                                            <p>{{this.timeslot.course}}<br/></p>
                                            <p>{{this.timeslot.insLast}}<br/></p>
                                        </td>

                                    {{/if}}
                                {{/each}}
                            </tr>
                        {{/each}}
                    </table>
                </div>
                <div id="courseList{{groupLetter}}" class=" col-md-4">
                    <h2>Group {{groupLetter}} Courses</h2>
                    {{#each COArray}}
                        <div class="card bg-secondary" style="width: 12rem;" onclick="onCOClick('{{this.id}}', '{{this.dName}}')"
                             id="{{this.dName}}">
                            <h3>{{this.name}}</h3>
                            <ul>{{this.insFirst}} {{this.insLast}}</ul>
                            <ul>{{this.startDate}} - {{this.endDate}}</ul>
                        </div>
                    {{/each}}
                </div>
            </div>
        {{/each}}
    </div>
    <a href="http://localhost:3000">
        <button class="btn btn-success">Return</button>
    </a>
</div>

<script>
    'use strict';

    let currCO = null;
    let currDOM = null;

    window.onload = function () {
        const modal = new bootstrap.Modal(document.getElementById('scheduleModal'));
        {{#if getrequest}}
            modal.show();
        {{else}}
            changeGroup('A');
        {{/if}}

    };

    function checkEnable() {
        let bTermSelected = document.getElementById('termSelect').value !== '';
        let bProgramSelected = document.getElementById('programSelect').value !== '';
        let bGroupSelected = document.getElementById('groupSelect').value !== '';

        if (bTermSelected && bProgramSelected && bGroupSelected) {
            document.getElementById('modalSubmit').removeAttribute('disabled');
        } else {
            document.getElementById('modalSubmit').disabled = 'disabled';
        }
    }

    function changeGroup(group) {
        // Disable all groups
        hideAllGroups();
        // enable the current one
        document.getElementById('group' + group).removeAttribute('hidden');
        document.getElementById('btn' + group).setAttribute('class', 'btn btn-primary');

    }

    function hideAllGroups() {
        {{#each groupArray}}
            document.getElementById("group{{groupLetter}}").setAttribute('hidden', '');
            document.getElementById("btn{{groupLetter}}").setAttribute('class', 'btn btn-secondary');
        {{/each}}

    }

    /**
     * onclick handler for course offerings
     * @param idCO
     */
    function onCOClick(idCO, domObj) {
        //retrieving DOM objects by id
        const objCO = document.getElementById(domObj);
        const currObjCO = document.getElementById(currDOM)

        if (currCO === idCO) //if clicked CO is alreaady highlighted
        {
            objCO.removeAttribute('class', 'bg-info');
            objCO.setAttribute('class', 'bg-secondary');
            currCO = null;
            currDOM = null;
        } else {
            if (currCO !== null) { // if there's a differnt CO highlighted, otherwise its jusst null
                currObjCO.removeAttribute('class', 'bg-info');
                currObjCO.setAttribute('class', 'bg-secondary');
            }
            objCO.removeAttribute('class', 'bg-secondary');
            objCO.setAttribute('class', 'bg-info');
            currCO = idCO;
            currDOM = domObj;
        }

    }

    async function onCellClick(idCell, tSlot, cellCO) {
        if (currCO) {
            //if not blank
            if (tSlot) {
                //If the selected CO is not the same as the current CO
                console.log("co log" + cellCO)
                if (cellCO !== currCO) {
                    await fetch('/schedule', {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': "application/json"
                        },
                        body: JSON.stringify({id: tSlot}),
                    })
                } else { // timeslots are the same
                    return;
                }
            }
            console.log("await Fetch");
            try {
                const response = await fetch('/schedule', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        idCell: idCell,
                        CO: currCO
                    }),
                });

                if (!response.ok) {
                    throw new Error('Failed to update schedule');
                }

                const data = await response.json();
                // Access retTSlot data here
                console.log('Retrieved retTSlot:', data.retTSlot);

                addTSToCell(idCell, data.retTSlot, data.xtraInfo);
            } catch (error) {
                // Handle errors
                console.error('Error updating schedule:', error);
            }


        }
    }


    function addTSToCell(idCell, tSlot, xtraInfo) {
        let oldTD = document.getElementById(idCell);
        console.log(tSlot.program + ":program");

        console.log(tSlot.CourseOfferingId);
        let newTD = "<td oncontextmenu=\"onCellRightClick('" + idCell + "', '" + tSlot.id + "', '" + tSlot.CourseOfferingId + "')\" " +
                "onclick=\"onCellClick('" + idCell + "', '" + tSlot.id + "', '" + tSlot.CourseOfferingId + "')\" " +
                "id=\"" + idCell + "\">" +
                "<p>" + xtraInfo.program + "<br/></p>" +
                "<p>" + xtraInfo.course + "<br/></p>" +
                "<p>" + xtraInfo.insLast + "<br/></p>" +
                "</td>";

        console.log(newTD)

        oldTD.outerHTML = newTD;
    }


    async function onCellRightClick(idCell, tSlot, cellCO) {
        await fetch('/schedule', {
            method: 'DELETE',
            headers: {
                'Content-Type': "application/json"
            },
            body: JSON.stringify({id: tSlot}),
        })

        let oldTD = document.getElementById(idCell);
        let newTD = "<td oncontextmenu=\"onCellRightClick('" + idCell + "', '" + "" + "', '" + "" + "')\" " +
                "onclick=\"onCellClick('" + idCell + "', '" + "" + "', '" + "" + "')\" " +
                "id=\"" + idCell + "\">" +
                "<p><br/></p>" +
                "<p><br/></p>" +
                "<p><br/></p>" +
                "</td>";
        oldTD.outerHTML = newTD;
    }


</script>
