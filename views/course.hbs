<div class="container p-1">
    <div class="row mb-2">
        <h1 class="col-md-5">{{title}}</h1>
        <!--Empty spacer, to help with formatting-->
        <div class="col-md-5"></div>
        <!--Add button is at the top, for longer table lists-->
        <button id="createCourseButton" type="button" class="btn btn-success col-md-2" data-toggle="modal" data-target="#addModal">Add New
            Course
        </button>
    </div>
    {{#if courseList}}
        <table id="table" class="table table-striped">
            <thead class="table-primary">
            <tr>
                <th>Course Code</th>
                <th>Course Name</th>
                <th>Number of Credits</th>
                <th>Number of Hours</th>
                <th>Preferred Instructor</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            {{#each courseList}}
                <tr>
                    <td id="{{this.id}}courseCode">{{this.courseCode}}</td>
                    <td id="{{this.id}}courseName">{{this.courseName}}</td>
                    <td id="{{this.id}}courseNumCredits">{{this.courseNumCredits}}</td>
                    <td id="{{this.id}}courseNumHoursPerWeek">{{this.courseNumHoursPerWeek}}</td>
                    <td id="{{this.id}}instructor" data-instructorid="{{this.Instructor.id}}">
                        {{this.Instructor.firstName}} {{this.Instructor.lastName}}
                    </td>
                    <td>
                        <button id="{{this.id}}edit" type="button" class="btn btn-primary editButton" data-toggle="modal"
                                data-target="#editModal">Edit</button>
                        <button id="{{this.id}}delete" type="button" class="btn btn-danger deleteButton" data-toggle="modal"
                                data-target="#deleteModal">Delete</button>
                    </td>
                </tr>
            {{/each}}
            </tbody>
        </table>

    <!-- Delete Modal -->
    <div class="modal fade" id="deleteModal" role="dialog" tabindex="-1" aria-labelledby="deleteModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Delete Course</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <form action="/course" method="POST">
                    <div class="modal-body">
                        <p>Are you sure you want to delete this course?</p>
                    </div>

                    <input type="text" id="deleteID" name="id" hidden/>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="button" id="deleteCourse" class="btn btn-outline-danger">Delete</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Modal -->
    <div class="modal fade" id="editModal" role="dialog" tabindex="-1" aria-labelledby="editModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Edit Existing Course</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                            onclick="closeModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <form action="/course" method="POST">
                    <div class="modal-body">
                        <label for="eCourseCode">Course Code:</label>
                        <input class="form-control {{#if putErr.courseCode}}is-invalid{{/if}}" id="eCourseCode"
                               name="courseCode" value="{{putSubmittedCourse.courseCode}}">
                        <div class="invalid-feedback">{{putErr.courseCode}}</div>

                        <label for="eCourseName">Course Name:</label>
                        <input class="form-control {{#if putErr.courseName}}is-invalid{{/if}}" id="eCourseName"
                               name="courseName" value="{{putSubmittedCourse.courseName}}">
                        <div class="invalid-feedback">{{putErr.courseName}}</div>

                        <label for="eCourseNumCredits">Number of Credits:</label>
                        <input class="form-control {{#if putErr.courseNumCredits}}is-invalid{{/if}}"
                               id="eCourseNumCredits"
                               name="courseNumCredits" value="{{putSubmittedCourse.courseNumCredits}}">
                        <div class="invalid-feedback">{{putErr.courseNumCredits}}</div>

                        <label for="eCourseNumHoursPerWeek">Number of Hours Per Week:</label>
                        <input class="form-control {{#if putErr.courseNumHoursPerWeek}}is-invalid{{/if}}"
                               id="eCourseNumHoursPerWeek"
                               name="courseNumHoursPerWeek" value="{{putSubmittedCourse.courseNumHoursPerWeek}}">
                        <div class="invalid-feedback">{{putErr.courseNumHoursPerWeek}}</div>
                        <div>
                            <label for="eInstructor">Preferred Instructor:</label>
                            <select id="eInstructor" class="form-select" data-instructorEdit="">Instructor
                                {{#each listInstructor}}
                                    <option value="{{id}}">{{lastName}}</option>
                                {{/each}}
                            </select>
                        </div>

                        <input type="text" id="editID" name="id" hidden/>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="button" id="editCourse" class="btn btn-outline-success">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <!--    If course entries are not defined we display an error message telling us no courses are stored-->
{{else}}
    <p>There are no courses stored</p>
{{/if}}
<a href="{{URL}}">
    <button class="btn btn-outline-success">Return</button>
</a>


<!-- Add Modal - must be displayed even if no courses exist -->
<div class="modal fade" id="addModal" role="dialog" tabindex="-1" aria-labelledby="addModalLabel"
     aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addModalLabel">Create New Course</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form action="/course" method="POST">
                <div class="modal-body">
                    <label for="cCourseCode">Course Code:</label>
                    <input class="form-control {{#if putErr.courseCode}}is-invalid{{/if}}" id="cCourseCode"
                           name="courseCode" value="{{putSubmittedCourse.courseCode}}">
                    <div class="invalid-feedback">{{putErr.courseCode}}</div>

                    <label for="cCourseName">Course Name:</label>
                    <input class="form-control {{#if putErr.courseName}}is-invalid{{/if}}" id="cCourseName"
                           name="courseName" value="{{putSubmittedCourse.courseName}}">
                    <div class="invalid-feedback">{{putErr.courseName}}</div>

                    <label for="cCourseNumCredits">Number of Credits:</label>
                    <input class="form-control {{#if putErr.courseNumCredits}}is-invalid{{/if}}"
                           id="cCourseNumCredits"
                           name="courseNumCredits" value="{{putSubmittedCourse.courseNumCredits}}">
                    <div class="invalid-feedback">{{putErr.courseNumCredits}}</div>

                    <label for="cCourseNumHoursPerWeek">Number of Hours Per Week:</label>
                    <input class="form-control {{#if putErr.courseNumHoursPerWeek}}is-invalid{{/if}}"
                           id="cCourseNumHoursPerWeek"
                           name="courseNumHoursPerWeek" value="{{putSubmittedCourse.courseNumHoursPerWeek}}">
                    <div class="invalid-feedback">{{putErr.courseNumHoursPerWeek}}</div>
                    <div>
                        <label for="cInstructor">Preferred Instructor:</label>
                        <select id="cInstructor" class="form-select">Default Instructor
                            {{#each listInstructor}}
                                <option value="{{id}}">{{lastName}}</option>
                            {{/each}}
                        </select>
                    </div>

                    <input type="text" id="editID" name="id" hidden/>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" id="createCourse" class="btn btn-outline-success">Add</button>
                </div>
            </form>
        </div>
    </div>
</div>

</div>
<!-- Handlers for the form submits -->
<script>
    'use strict';


    reLinkButtons();

    /**
     * This function links the buttons on the page to their appropriate handlers
     */
    function reLinkButtons() {
        $('#createCourse').click(handleCreateCourse);
        $('#deleteCourse').click(handleDeleteCourse);
        $('#editCourse').click(handleEditCourse);
        $('.deleteButton').click(function() {
            handleDeleteModal(this.id.replace('delete', ''));
        });
        $('.editButton').click(function() {
            handleEditModal(this.id.replace('edit', ''));
        });
        $('.modal').on('hidden.bs.modal', function() {
            clearErrors();
        });
    }

    /**
     * This function handles what happens when a user clicks the "create" button
     * in the Create New Course modal
     * @returns {Promise<void>}
     */
    async function handleCreateCourse() {
        let selectedInstructor = $('#cInstructor').val();
        let courseCode = $('#cCourseCode').val();
        let courseName = $('#cCourseName').val();
        let courseNumCredits = $('#cCourseNumCredits').val();
        let courseNumHoursPerWeek = $('#cCourseNumHoursPerWeek').val();


        // If no instructor is selected (blank option), set selectedInstructor to null
        if (selectedInstructor === '') {
            selectedInstructor = null; // or '' depending on how your backend expects the value
            const response = await fetch("{{URL}}/course", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    courseCode: courseCode,
                    courseName: courseName,
                    courseNumCredits: courseNumCredits,
                    courseNumHoursPerWeek: courseNumHoursPerWeek,
                    instructor: selectedInstructor,
                }),
            });

        }
        // Send a POST request to the router
        const response = await fetch("{{URL}}/course", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                courseCode: courseCode,
                courseName: courseName,
                courseNumCredits: courseNumCredits,
                courseNumHoursPerWeek: courseNumHoursPerWeek,
                instructor: selectedInstructor,
            }),
        });

        // Get the HTML text response
        const data = await response.text();
        const modal = '#addModal';

        // Load response, showing modal only if response is not OK
        loadResponse(modal, data, !response.ok);

        handleCreateModal(selectedInstructor, courseCode, courseName, courseNumCredits, courseNumHoursPerWeek);


    }

    function handleCreateModal(selectedInstructor, courseCode, courseName, courseNumCredits, courseNumHoursPerWeek) {
        $('#cInstructor').val(selectedInstructor);
        $('#cCourseCode').val(courseCode);
        $('#cCourseName').val(courseName);
        $('#cCourseNumCredits').val(courseNumCredits);
        $('#cCourseNumHoursPerWeek').val(courseNumHoursPerWeek);
    }


    /**
     * This function handles what happens when a user clicks the "Delete" button
     * in the Delete Course modal
     * @returns {Promise<void>}
     */
    async function handleDeleteCourse() {
        // send a DELETE request to the router
        const response = await fetch('{{URL}}/course', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                // use the val() method to get the value of a form input
                id: $('#deleteID').val(),
            }),
        });

        // get the HTML text response
        const data = await response.text();
        const modal = '#deleteModal';

        loadResponse(modal, data, !response.ok);
    }

    /**
     * This function handles what happens when a user clicks the "Save" button
     * in the Edit Existing Course modal
     * @returns {Promise<void>}
     */
    async function handleEditCourse() {
        const id = $('#editID').val();
        const selectedInstructor = $('#eInstructor').val();
        // send a PUT request to the router
        const response = await fetch("{{url}}/course", {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                // use the val() method to get the value of a form input

                courseCode: $('#eCourseCode').val(),
                courseName: $('#eCourseName').val(),
                courseNumCredits: $('#eCourseNumCredits').val(),
                courseNumHoursPerWeek: $('#eCourseNumHoursPerWeek').val(),
                instructor: selectedInstructor,
                id,
            }),

        });

        // get the HTML text response
        const data = await response.text();
        const modal = '#editModal';

        loadResponse(modal, data, !response.ok, selectedInstructor);

        // re-load the ID
        handleEditModal(id);


    }

    /**
     * This function loads a hidden form input in the delete modal with the ID of the course to delete
     * @param idToDelete    - The ID of the course to delete
     */
    function handleDeleteModal(idToDelete) {
        $('#deleteID').val(idToDelete);
    }

    /**
     * This function loads the form in the Edit Existing Course modal with the information
     * of the course the user wants to edit
     * @param idToEdit    - The ID of the course being edited
     */
    function handleEditModal(idToEdit) {
        $('#editID').val(idToEdit);
        $('#eCourseCode').val($(`#${idToEdit}courseCode`).text());
        $('#eCourseName').val($(`#${idToEdit}courseName`).text());
        $('#eCourseNumCredits').val($(`#${idToEdit}courseNumCredits`).text());
        $('#eCourseNumHoursPerWeek').val($(`#${idToEdit}courseNumHoursPerWeek`).text());
        $('#eInstructor').val(document.getElementById(idToEdit + 'instructor').dataset.instructorid);
    }

    /**
     * As the server gives responses in HTML, the client needs to be able to parse that data.
     * This function replaces the HTML of the current page with the new HTML from the server
     * and pops up the last used modal if there were errors.
     * @param modalID   - The HTML id of the modal to pop up
     * @param data      - The HTML response from the server
     * @param showModal - True to show the modal, false to hide the modal
     */
    function loadResponse(modalID, data, showModal, selectedInstructor) {
        // set the whole document's HTML to be the response
        document.documentElement.innerHTML = data;
        // re-add the click handlers
        reLinkButtons();
        // refresh the modal
        const modal = $(modalID);
        modal.modal('hide');

        // if the response was not ok, pop up the modal
        if (showModal) {
            modal.modal('show');
            // Set the instructor dropdown value back to the stored ID
            $('#eInstructor').val(selectedInstructor);
            $('#cInstructor').val(selectedInstructor);
        }
    }

    function clearErrors() {
        // Clear error messages or styling for input fields
        $('.is-invalid').removeClass('is-invalid');
        $('.invalid-feedback').text('');

        $('#cCourseNumber').val('');
        $('#cStartDate').val('');
        $('#cEndDate').val('');

        $('#cCourseCode').val('');
        $('#cCourseName').val('');
        $('#cCourseNumCredits').val('');
        $('#cCourseNumHoursPerWeek').val('');
    }

    function closeModal() {
        $('#editModal').modal('hide');
    }


</script>

<!--<style>
    .fixed-size-table td,
    .fixed-size-table th {
        padding: 0.8rem;
        font-size: 1rem;
    }

    .fixed-size-table-header th {
        position: sticky;
        top: 0;
        z-index: 1;
    }

    .fixed-size-table button {
        padding: 0.25rem 0.5rem;
        font-size: 0.8rem;
    }

    .table-wrapper {
        max-height: calc(100vh - 275px); /* Adjust the subtracted value as needed */
        overflow-y: auto;
        border: 1px solid #ccc; /* Add border to the div */
    }
</style>-->
