<div class="container p-2">
    <div class="row mb-2">
        <h1 class="col-md-5">{{title}}</h1>
        <!--Empty spacer, to help with formatting-->
        <div class="col-md-5"></div>
        <!--Add button is at the top, for longer table lists-->
        <!--Button to pop up the create modal-->
        <button type="button" class="btn btn-success col-md-2" data-toggle="modal" data-target="#createModal">
            Add New Classroom
        </button>
    </div>
    {{#if classroomList}}
        <table class="table table-striped">
            <thead class="table-primary">
            <tr>
                <th>Room Number</th>
                <th>Location</th>
                <th>Actions</th>
            </tr>
            </thead>
            <!--Here is where I loop through my array object and add in a <tr> for each loop, and a <td> for each object-->
            <tbody>
            {{#each classroomList}}
                <tr>
                    <td id="{{this.id}}roomNumber">{{this.roomNumber}}</td>
                    <td id="{{this.id}}location">{{this.location}}</td>
                    <td>
                        <!--                    These are the buttons for update/delete-->
                        <button type="button" id="edit{{this.id}}" class="btn btn-primary editButton" data-toggle="modal"
                                data-target="#updateModal">Edit
                        </button>
                        <button type="button" id="del{{this.id}}" class="btn btn-danger delButton" data-toggle="modal"
                                data-target="#delModal">Delete
                        </button>
                    </td>

                </tr>
            {{/each}}
            </tbody>
        </table>
    {{else}}
        <p>There are currently no classrooms in the system</p>
    {{/if}}

    <!--Create Modal-->
    <div class="modal fade" id="createModal" role="dialog" tabindex="-1" aria-labelledby="createModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="createModalLabel">Input New Classroom</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form action="/classroom" method="POST">
                        <label for="cRoomNumber">Room number:</label>
                        <input type="text" class="form-control {{#if err.roomNumber}}is-invalid{{/if}}" id="cRoomNumber"
                               name="roomNumber">
                        <div class="invalid-feedback">{{err.roomNumber}}</div>
                        <label for="cLocation">Location:</label>
                        <input type="text" class="form-control {{#if err.location}}is-invalid{{/if}}" id="cLocation"
                               name="location">
                        <div class="invalid-feedback">{{err.location}}</div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="closeCreate()>Close</button>
                    <button type="button" id="createClassroom" class="btn btn-outline-success" data-cy="createSubmit">Add</button>
                </div>
            </div>
        </div>
    </div>

    <!--Update modal-->
    <div class="modal fade" id="updateModal" role="dialog" tabindex="-1" aria-labelledby="updateModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="updateModalLabel">Edit Classroom</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>

                </div>
                <div class="modal-body">
                    <form action="/classroom" method="POST">
                        <label for="eRoomNumber">Room number:</label>
                        <input type="text" class="form-control {{#if err.roomNumber}}is-invalid{{/if}}" id="eRoomNumber"
                               name="roomNumber" value="{{putClassroom.roomNumber}}">
                        <div class="invalid-feedback">{{err.roomNumber}}</div>
                        <label for="eLocation">Location:</label>
                        <input type="text" class="form-control {{#if err.location}}is-invalid{{/if}}" id="eLocation"
                               name="location" value="{{putClassroom.location}}">
                        <div class="invalid-feedback">{{err.location}}</div>
                        <input type="text" id="updateID" name="id" hidden/>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="closeUpdate()">Close</button>
                    <button type="button" id="editClassroom" class="btn btn-outline-success">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
    <!--Delete modal-->
    <div class="modal fade" id="delModal" role="dialog" tabindex="-1" aria-labelledby="delModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="delModalLabel">Delete Classroom</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>

                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete Room:
                        <input type="text" id="delConfirmMsg"/>
                        <input type="text" id="delID" name="id" hidden/></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" id="delClassroom" class="btn btn-outline-danger">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <a href="{{URL}}"><button class="btn btn-outline-success">Return</button></a>
</div>
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script>
    'use strict';

    linkButtonFunctions();

    /**
     * This function connects buttons to proper event handlers
     */
    function linkButtonFunctions() {
        $('#createClassroom').click(createClassroom);
        $('#editClassroom').click(editClassroom);
        $('.editButton').click(function() {
            loadEditModal(this.id.replace('edit', ''));
        });
        $('#delClassroom').click(delClassroom);
        $('.delButton').click(function() {
            loadDelModal(this.id.replace('del', ''));
        });
        $(".modal").on("hidden.bs.modal", function () {
            clearErrors();
        });
    }


    /**
     * This method calls the API to create the classroom from user input
     * on the modal, and reloads list of classrooms if successful or displays
     * error if it is not successful and which values do not pass validators
     * @returns {Promise<void>}
     */
    async function createClassroom() {
        // Calling the API POST
        const response = await fetch('{{URL}}/classroom', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                roomNumber: $('#cRoomNumber').val(),
                location: $('#cLocation').val(),
            }),
        });

        // data will store the HTML information to reload the page
        const data = await response.text();
        // storing the modal ID, so that it can be called from loadResponse
        const modal = '#createModal';

        loadResponse(modal, data, !response.ok);
    };

    /**
     * This method calls the API to update the classroom from user input
     * on the modal, and reloads list of classrooms if successful or displays
     * error if it is not successful and which values do not pass validators
     * @returns {Promise<void>}
     */
    async function editClassroom() {
        const id = $('#updateID').val();
        const roomNumber = $('#eRoomNumber').val()
        const location = $('#eLocation').val()

        // Calling the API PUT
        const response = await fetch('{{URL}}/classroom', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                roomNumber,
                location,
                id,
            }),
        });

        const data = await response.text();
        const modal = '#updateModal';

        loadResponse(modal, data, !response.ok);

        loadEditModal(id)
    };

    /**
     * This method asks for confirmation on delete, and then deletes
     * the selected classroom from the database
     * @returns {Promise<void>}
     */
    async function delClassroom() {
        const id = $('#delID').val();

        const response = await fetch('{{URL}}/classroom', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                // 'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: JSON.stringify({
                roomNumber: $('#eRoomNumber').val(),
                location: $('#eLocation').val(),
                id,
            }),
        });

        const data = await response.text();
        const modal = '#delModal';

        loadResponse(modal, data, !response.ok);

        loadDelModal(id);

    };

    /**
     * This method loads the response from the
     * database, and displays updated table if there is no errors
     * or loads the modal displaying errors
     * @param modalID
     * @param data
     * @param hasErrs
     */
    function loadResponse(modalID, data, hasErrs) {
        document.documentElement.innerHTML = data;

        linkButtonFunctions();

        const modal = $(modalID);
        modal.modal('hide');

        if (hasErrs) {
            modal.modal('show');
        }
    };

    /**
     * This method enters the data from selected entry
     * into the edit form on the modal
     * @param idToEdit
     */
    function loadEditModal(idToEdit) {
        $('#eRoomNumber').val($(`#${idToEdit}roomNumber`).text());
        $('#eLocation').val($(`#${idToEdit}location`).text());
        $('#updateID').val(idToEdit);
    };

    /**
     * This method displays the data from selected entry
     * into the delete confirm modal
     * @param idToDelete
     */
    function loadDelModal(idToDelete) {
        $('#delID').val(idToDelete);
        $('#delConfirmMsg').val($(`#${idToDelete}roomNumber`).text());
    };

    function clearErrors() {
        // Clear error messages or styling for input fields
        $(".is-invalid").removeClass("is-invalid");
        $(".invalid-feedback").text("");

        $('#eRoomNumber').val("");
        $('#eLocation').val("");
        $('#cRoomNumber').val("");
        $('#cLocation').val("");

    }

    function closeUpdate() {
        $('#updateModal').modal('hide');
    }

    function closeCreate() {
        $('#createModal').modal('hide');
    }
</script>
