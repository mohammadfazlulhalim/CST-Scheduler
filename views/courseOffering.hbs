<div class="container-fluid px-5">
    <div class="row mb-2">
        <h1 class="col-md-4">{{title}}</h1>
        <button type="button" class="btn btn-success col-md-2" data-toggle="modal" id="openCreateModal"
                data-target="#addModal">Add New Course Offering
        </button>
        <div class="col-md-1"></div>
        <div class="col-md-5">
            <div class="input-group">
                <label for="filterTerm" class="input-group-text">Filter by Term:</label>
                <select class="form-select" id="filterTerm" onchange="handleFilter()">
                    <option value="">All Terms</option>
                    <!-- Dynamic generation of options based on listTerm -->
                    {{#each listTerm}}
                        <option value="{{id}}" data-termstart="{{startDate}}" data-termend="{{endDate}}">
                            {{this.calendarYear}} - Term {{this.termNumber}}
                        </option>
                    {{/each}}
                </select>
            </div>
        </div>
    </div>


    {{#if listCO}}
        <div class="table-wrapper table-responsive mt-3">
            <table id="dataTable" class="table table-striped fixed-size-table">
                <thead class="table-primary">
                <tr>
                    <th>Name</th>
                    <th class="text-center">Group</th>
                    <th class="text-center">Course</th>
                    <th class="text-center">Term</th>
                    <th class="text-center">Start Date</th>
                    <th class="text-center">End Date</th>
                    <th class="text-center">Primary Instructor</th>
                    <th class="text-center">Alternative Instructor</th>
                    <th class="text-center">Program</th>
                    <th class="text-center">Actions</th>
                </tr>
                </thead>
                <tbody id="tableBody">
                {{#each listCO}}
                    <tr class="term-row" data-termid="{{Term.id}}">
                        <td id="{{this.id}}name">{{this.name}}</td>
                        <td class="text-center" id="{{this.id}}group">{{this.group}}</td>
                        <td class="text-center" id="{{this.id}}course"
                            data-courseid="{{this.Course.id}}">{{this.Course.courseCode}}</td>
                        <td class="text-center" id="{{this.id}}term"
                            data-termid="{{this.Term.id}}">{{this.Term.title}}</td>
                        <td class="text-center" id="{{this.id}}startDate">{{this.startDate}}</td>
                        <td class="text-center" id="{{this.id}}endDate">{{this.endDate}}</td>
                        <td class="text-center" id="{{this.id}}primaryInstructor"
                            data-primaryinstructorid="{{this.primaryInstructor.id}}">
                            {{this.primaryInstructor.firstName}} {{this.primaryInstructor.lastName}}
                        </td>
                        <td class="text-center" id="{{this.id}}alternativeInstructor"
                            data-alternativeinstructorid="{{this.alternativeInstructor.id}}">
                            {{this.alternativeInstructor.firstName}} {{this.alternativeInstructor.lastName}}
                        </td>
                        <td class="text-center" id="{{this.id}}program" data-programid="{{this.Program.id}}">
                            {{this.Program.programAbbreviation}}
                        </td>
                        <td class="text-center">
                            <button id="{{this.id}}edit" type="button" class="btn btn-primary editButton"
                                    data-toggle="modal" data-target="#editModal"
                                    onclick="handleEditModal('{{this.id}}')">Edit
                            </button>
                            <button id="{{this.id}}delete" type="button" class="btn btn-danger deleteButton"
                                    data-toggle="modal" data-target="#deleteModal">Delete
                            </button>
                        </td>
                    </tr>
                {{/each}}
                </tbody>
            </table>
        </div>

        <!-- Delete Modal -->
        <div class="modal fade" id="deleteModal" role="dialog" tabindex="-1" aria-labelledby="deleteModalLabel"
             aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title text-danger" id="deleteModalLabel">Delete Course Offering </h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <form action="/courseOffering" method="POST">
                        <div class="modal-body">
                            <p id="deleteModalText">Are you sure you want to delete this Course Offering?</p>
                        </div>

                        <input hidden type="number" id="dID"
                               name="id" value="{{submittedCO.id}}">

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            <button type="button" id="deleteCO" class="btn btn-outline-danger">Delete</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Edit Modal -->
        <div class="modal fade" id="editModal" role="dialog" tabindex="-1" aria-labelledby="editModalLabel"
             aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title text-warning" id="editModalLabel">Edit Existing Course Offering</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <form action="/courseOffering" method="POST">
                        <div class="modal-body">
                            <label hidden for="eID">Course Offering Number:</label>
                            <input hidden type="number"
                                   class="form-control {{#if putErr.id}}is-invalid{{/if}}" id="eID"
                                   name="id" value="{{submittedCO.id}}">
                            <div class="invalid-feedback">{{putErr.id}}</div>
                            <label for="eName">Name:</label>
                            <input type="text" class="form-control {{#if putErr.name}}is-invalid{{/if}}" id="eName"
                                   name="name" value="{{submittedCO.name}}">
                            <div class="invalid-feedback">{{putErr.name}}</div>
                            <div>
                                <label for="eTerm">Term</label>
                                <select id="eTerm" class="form-select" onchange="selectedTermUpdate()">Course
                                    {{#each listTerm}}
                                        <option value="{{id}}" id="optionEditTerm{{id}}" data-termstart="{{startDate}}"
                                                data-termend="{{endDate}}">{{this.calendarYear}} -
                                            Term {{this.termNumber}}</option>
                                    {{/each}}
                                </select>
                            </div>

                            <label for="eStartDate">Start Date:</label>
                            <input type="text" class="form-control {{#if putErr.startDate}}is-invalid{{/if}}"
                                   id="eStartDate"
                                   name="startDate" value="{{submittedCO.startDate}}">
                            <div class="invalid-feedback">{{putErr.startDate}}</div>

                            <label for="eEndDate">End Date:</label>
                            <input type="text" class="form-control {{#if putErr.endDate}}is-invalid{{/if}}"
                                   id="eEndDate"
                                   name="endDate" value="{{submittedCO.endDate}}">
                            <div class="invalid-feedback">{{putErr.endDate}}</div>

                            <label for="eGroup">Group:</label>
                            <input type="text" class="form-control {{#if putErr.group}}is-invalid{{/if}}" id="eGroup"
                                   name="group" value="{{submittedCO.group}}">
                            <div class="invalid-feedback">{{putErr.group}}</div>
                            <div>
                                <label for="eProgram">Program</label>
                                <select id="eProgram" class="form-select" onchange="checkUpdateEnable()">Program
                                    {{#each listProgram}}
                                        <option value="{{id}}">{{programAbbreviation}}</option>
                                    {{/each}}
                                </select>
                            </div>
                            <div>
                                <label for="eprimaryInstructor">Primary Instructor</label>

                                <select id="eprimaryInstructor" class="form-select" onchange="checkUpdateEnable()">Primary
                                    Instructor
                                    {{#each listInstructor}}
                                        <option value="{{id}}">{{lastName}}</option>
                                    {{/each}}
                                </select>
                            </div>
                            <div>
                                <label for="ealternativeInstructor">Alternative Instructor (Optional)</label>
                                <select id="ealternativeInstructor" class="form-select" onchange="checkUpdateEnable()">Alternative
                                    Instructor
                                    {{#each listInstructor}}
                                        <option value="{{id}}">{{lastName}}</option>
                                    {{/each}}
                                </select>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            <button type="button" id="editCO" class="btn btn-outline-success" disabled>Save</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    {{else}}
        <p>There are no course offerings stored</p>
    {{/if}}
    <!-- Add Modal - must be displayed even if no terms exist -->
    <div class="modal fade" id="addModal" role="dialog" tabindex="-1" aria-labelledby="addModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-success" id="addModalLabel">Create New Course Offering</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <form action="/courseOffering" method="POST">
                    <div class="modal-body">
                        <input hidden type="number" class="form-control {{#if putErr.id}}is-invalid{{/if}}" id="eID"
                               name="ID" value="{{submittedCO.id}}">
                        <div class="invalid-feedback">{{putErr.id}}</div>
                        <div class="form-group">
                            <label for="cCourse">Course</label>
                            <input id="cCourse" type="text" list="courses" oninput="selectedCourseCreate()"
                                   class="form-control"/>
                            <datalist id="courses">
                                {{#each listCourse}}
                                    <option id="optionCreateCourse{{courseCode}}" value="{{courseCode}}"
                                            data-courseid="{{id}}" data-coursename="{{courseName}}"
                                            data-instructorid="{{this.instructor.id}}"></option>
                                {{/each}}
                            </datalist>
                            <div class="invalid-feedback" id="cCourseInvalid"></div>
                        </div>

                        <div class="form-group">
                            <label for="cName">Name:</label>
                            <input type="text" class="form-control {{#if err.name}}is-invalid{{/if}}" id="cName"
                                   name="name" value="{{submittedCO.name}}">
                            <div class="invalid-feedback">{{err.name}}</div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col">
                                <label for="cTerm">Term:</label>
                                <select id="cTerm" class="form-select" onchange="selectedTermCreate()">
                                    <option></option>
                                    {{#each listTerm}}
                                        <option value="{{id}}" id="optionCreateTerm{{id}}"
                                                data-termstart="{{startDate}}" data-termend="{{endDate}}">
                                            {{this.calendarYear}} - Term {{this.termNumber}}
                                        </option>
                                    {{/each}}
                                </select>
                            </div>
                            <div class="form-group col">
                                <label for="cStartDate">Start Date:</label>
                                <input type="date" class="form-control" id="cStartDate" name="startDate"
                                       value="{{submittedCO.startDate}}">
                            </div>
                            <div class="form-group col">
                                <label for="cEndDate">End Date:</label>
                                <input type="date" class="form-control" id="cEndDate" name="endDate"
                                       value="{{submittedCO.endDate}}">
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col">
                                <label for="cProgram">Program:</label>
                                <select id="cProgram" class="form-select" onchange="checkCreateEnable()">
                                    <option></option>
                                    {{#each listProgram}}
                                        <option value="{{id}}">{{programAbbreviation}}</option>
                                    {{/each}}
                                </select>
                            </div>
                            <div class="form-group col">
                                <label for="cprimaryInstructor">Primary Instructor:</label>
                                <select id="cprimaryInstructor" class="form-select"
                                        onchange="checkCreateInstructorMatch()">
                                    {{#each listInstructor}}
                                        <option value="{{id}}" id="optionCreateInstructor{{id}}">{{lastName}}</option>
                                    {{/each}}
                                </select>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="calternativeInstructor">Alternative Instructor: (Optional)</label>
                            <select id="calternativeInstructor" class="form-select"
                                    onchange="checkCreateInstructorMatch()">
                                <option></option>
                                {{#each listInstructor}}
                                    <option value="{{id}}">{{lastName}}</option>
                                {{/each}}
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Number of Groups To Create:</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <button id="decrement" class="btn btn-outline-secondary" type="button"
                                            onclick="decrementValue()">
                                        -
                                    </button>
                                </div>
                                <input type="text" class="form-control text-center" id="numberOfGroups" value="1"
                                       min="1"
                                       max="4" aria-label="Number of Groups" aria-describedby="basic-addon1"
                                       readonly>
                                <div class="input-group-append">
                                    <button id="increment" class="btn btn-outline-secondary" type="button"
                                            onclick="incrementValue()">
                                        +
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="button" id="createCO" class="btn btn-success" disabled>Create</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="text-end p-2">
        <a href="{{URL}}">
            <button class="btn btn-dark">Return</button>
        </a>
    </div>
</div>

<script>
    'use strict';
    reLinkButtons();

    /**
     * Filter term rows based on the selected term.
     */
    // Define a function to handle filtering
    function handleFilter() {
        // Get the value of the selected term
        var termId = document.getElementById('filterTerm').value;
        // Select all elements with class 'term-row'
        var termRows = document.querySelectorAll('.term-row');
        // Iterate through term rows to show/hide based on selected term
        termRows.forEach(function(row) {
            // Get the term id from the row's data attribute
            var rowTermId = row.getAttribute('data-termid');
            // Show or hide the row based on the selected term
            if (termId === '' || rowTermId === termId) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }

    // Call the filter function initially to apply any default filtering
    handleFilter();

    /**
     * Sorts the table by the specified column index.
     *
     * @param {number} columnIndex - The index of the column to sort by.
     */
    function sortTable(columnIndex) {
        var table, rows, switching, i, x, y, shouldSwitch;
        table = document.getElementById('dataTable');
        // Loop until no switching is needed
        switching = true;
        while (switching) {
            switching = false;
            rows = table.rows;
            for (i = 1; i < (rows.length - 1); i++) {
                shouldSwitch = false;
                x = rows[i].getElementsByTagName('TD')[columnIndex];
                y = rows[i + 1].getElementsByTagName('TD')[columnIndex];
                // Check if rows should be switched based on column values
                if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    shouldSwitch = true;
                    break;
                }
            }
            // Switch rows if needed
            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
            }
        }
    }

    /**
     * Attaches click event listeners to table headers for sorting.
     */
    document.querySelectorAll('#dataTable th').forEach((header, index) => {
        header.addEventListener('click', () => sortTable(index));
    });

    /**
     * Increments the value of the number of groups if it's less than 4.
     */
    function incrementValue() {
        let currentValue = parseInt(document.getElementById('numberOfGroups').value);
        if (currentValue < 4) {
            document.getElementById('numberOfGroups').value = currentValue + 1;
        }
    }

    /**
     * Decrements the value of the number of groups if it's greater than 1.
     */
    function decrementValue() {
        let currentValue = parseInt(document.getElementById('numberOfGroups').value);
        if (currentValue > 1) {
            document.getElementById('numberOfGroups').value = currentValue - 1;
        }
    }

    /**
     * Autofills the course name field when a course is selected.
     */
    function selectedCourseCreate() {
        let courseCode = document.getElementById('cCourse').value;
        // Try to autofill course name and primary instructor fields
        try {
            document.getElementById('cName').value = document.getElementById('optionCreateCourse' + courseCode).dataset.coursename;
            document.getElementById('cCourseInvalid').innerText = '';
            document.getElementById('cCourse').classList.remove('is-invalid');
            document.getElementById('cprimaryInstructor').value = (parseInt(document.getElementById('optionCreateCourse' + courseCode).dataset.instructorid));
        } catch (e) {
            // Handle invalid course selection
            document.getElementById('cCourse').classList.add('is-invalid');
            document.getElementById('cCourseInvalid').innerText = 'Please select a Course Code from the list';
            document.getElementById('cName').value = '';
        }
    }

    /**
     * Autofills start and end dates when term is selected.
     */
    function selectedTermCreate() {
        let termID = document.getElementById('cTerm').value;
        // Autofill start and end dates based on selected term
        document.getElementById('cStartDate').value = document.getElementById('optionCreateTerm' + termID).dataset.termstart;
        document.getElementById('cEndDate').value = document.getElementById('optionCreateTerm' + termID).dataset.termend;
    }

    /**
     * Checks that each dropdown has an associated property selected and enables the submit button if conditions are met.
     */
    function checkCreateEnable() {
        let termSelected = document.getElementById('cTerm').value.trim() !== '';
        let courseCode = document.getElementById('cCourse').value.trim();
        let courseSelected = false;

        // Check if the course is selected
        try {
            courseSelected = !!document.getElementById('optionCreateCourse' + courseCode).dataset.courseid;
        } catch (e) {
            courseSelected = false;
        }

        let primaryInstructorSelected = document.getElementById('cprimaryInstructor').value.trim() !== '';
        let primaryInstructor = document.getElementById('cprimaryInstructor');
        let programSelected = document.getElementById('cProgram').value.trim() !== '';
        let alternativeInstructorSelect = document.getElementById('calternativeInstructor');

        // Enable/disable create button based on selections
        if (termSelected && programSelected && courseSelected && primaryInstructorSelected) {
            document.getElementById('createCO').removeAttribute('disabled');
        } else {
            document.getElementById('createCO').disabled = true;
        }

        // Enable/disable alternative instructor select based on whether primary instructor is selected
        if (primaryInstructorSelected) {
            alternativeInstructorSelect.removeAttribute('disabled');
        } else {
            alternativeInstructorSelect.value = null;
            alternativeInstructorSelect.disabled = true;
        }

        // Disable create button if primary instructor is same as alternative instructor
        document.getElementById('createCO').disabled = primaryInstructor === alternativeInstructorSelect && primaryInstructor !== '';
    }

    /**
     * Updates start and end dates when a term is selected for editing.
     */
    function selectedTermUpdate() {
        let termID = document.getElementById('eTerm').value;
        document.getElementById('eStartDate').value = document.getElementById('optionEditTerm' + termID).dataset.termstart;
        document.getElementById('eEndDate').value = document.getElementById('optionEditTerm' + termID).dataset.termend;

        // Check if update is enabled after selecting term
        checkUpdateEnable();
    }

    /**
     * Checks that a value has been selected for every dropdown field and enables the submit button if conditions are met.
     */
    function checkUpdateEnable() {
        var termSelected = document.getElementById('eTerm').value !== '';
        var primaryInstructorSelected = document.getElementById('eprimaryInstructor').value !== '';
        var programSelected = document.getElementById('eProgram').value !== '';
        var editCOButton = document.getElementById('editCO');

        // Enable/disable alternative instructor select based on whether primary instructor is selected
        if (primaryInstructorSelected) {
            document.getElementById('ealternativeInstructor').removeAttribute('disabled');
        } else {
            document.getElementById('ealternativeInstructor').disabled = true;
            document.getElementById('ealternativeInstructor').value = null;
        }

        // Enable/disable edit button based on selections
        if (termSelected && programSelected && primaryInstructorSelected) {
            editCOButton.removeAttribute('disabled');
            checkEditInstructorMatch();
        } else {
            editCOButton.disabled = true;
        }
    }

    /**
     * Checks if the primary and alternative instructors are the same during course creation and marks them as invalid if they match.
     */
    function checkCreateInstructorMatch() {
        var primaryInstructor = document.getElementById('cprimaryInstructor').value;
        var alternativeInstructor = document.getElementById('calternativeInstructor').value;
        var createCOButton = document.getElementById('createCO');

        // Disable create button and mark instructors as invalid if they match
        if (primaryInstructor === alternativeInstructor && primaryInstructor !== '') {
            createCOButton.disabled = true;
            document.getElementById('cprimaryInstructor').classList.add('is-invalid');
            document.getElementById('calternativeInstructor').classList.add('is-invalid');
        } else {
            createCOButton.disabled = false;
            document.getElementById('cprimaryInstructor').classList.remove('is-invalid');
            document.getElementById('calternativeInstructor').classList.remove('is-invalid');
        }
        // Check if create is enabled after checking instructor match
        checkCreateEnable();
    }

    /**
     * Checks if the primary and alternative instructors are the same during course editing and marks them as invalid if they match.
     */
    function checkEditInstructorMatch() {
        var primaryInstructor = document.getElementById('eprimaryInstructor').value;
        var alternativeInstructor = document.getElementById('ealternativeInstructor').value;
        var editCOButton = document.getElementById('editCO');

        // Disable edit button and mark instructors as invalid if they match
        if (primaryInstructor === alternativeInstructor) {
            editCOButton.disabled = true;
            document.getElementById('eprimaryInstructor').classList.add('is-invalid');
            document.getElementById('ealternativeInstructor').classList.add('is-invalid');
        } else {
            editCOButton.disabled = false;
            document.getElementById('eprimaryInstructor').classList.remove('is-invalid');
            document.getElementById('ealternativeInstructor').classList.remove('is-invalid');
        }
    }

    /**
     * This function links the buttons on the page to their appropriate handlers
     */
    function reLinkButtons() {
        $('#createCO').click(handleCreateCO);
        $('#deleteCO').click(handleDeleteCO);
        $('#editCO').click(handleEditCO);
        $('.deleteButton').click(function() {
            handleDeleteModal(this.id.replace('delete', ''));
        });
        $('#openCreateModal').click(handleCreateModal);

        $('.editButton').click(function() {
            handleEditModal(this.id.replace('edit', ''));
        });
        $('.modal').on('hidden.bs.modal', function() {
            clearErrors();
        });
    }

    /**
     * This function handles what happens when a user clicks the "create" button
     * in the Create New Course Offering modal
     * @returns {Promise<void>}
     */
    async function handleCreateCO() {
        let numberOfGroups = parseInt(document.getElementById('numberOfGroups').value);
        let courseCode = document.getElementById('cCourse').value;
        let courseID = document.getElementById('optionCreateCourse' + courseCode).dataset.courseid;
        let name = $('#cName').val();
        let startDate = $('#cStartDate').val();
        let endDate = $('#cEndDate').val();
        let program = $('#cProgram').val();
        let primaryInstructor = $('#cprimaryInstructor').val();
        let alternativeInstructor = $('#calternativeInstructor').val();
        let term = $('#cTerm').val();


        // Construct request body for course offering creation
        let requestBody = {
            name: name,
            startDate: startDate,
            endDate: endDate,
            course: courseID,
            program: program,
            primaryInstructor: primaryInstructor,
            term: term,
        };

        if (alternativeInstructor !== '') {
            requestBody.alternativeInstructor = alternativeInstructor;
        }

        // Array to store all the promises
        let promises = [];

        // Create all course offerings
        for (let i = 1; i <= numberOfGroups; i++) {
            let groupLetter = String.fromCharCode(64 + i); // Convert 1 to "A", 2 to "B", etc.
            requestBody.group = groupLetter;

            promises.push(fetch('{{URL}}/courseOffering', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody),
            }));
        }

        // Wait for all promises to resolve
        const responses = await Promise.all(promises);

        // Check for errors in responses
        let errorOccurred = false;
        for (let i = 0; i < responses.length; i++) {
            const response = responses[i];
            if (!response.ok) {
                errorOccurred = true;
                const data = await response.text();
                const modal = '#addModal';
                loadResponse(modal, data, true); // Display error in modal
                handleCreateFail(courseCode, name, startDate, endDate, program, primaryInstructor, alternativeInstructor, term);
                break; // Stop further processing if an error occurs
            }
        }

        // If no errors occurred, proceed with loading responses
        if (!errorOccurred) {
            for (let i = 0; i < responses.length; i++) {
                const response = responses[i];
                const data = await response.text();
                const modal = '#addModal';
                loadResponse(modal, data, false);
            }
        }
    }


    /**
     * This function handles what happens when a user clicks the "Delete" button
     * in the Delete Course Offering modal
     * @returns {Promise<void>}
     */
    async function handleDeleteCO() {
        // send a DELETE request to the router
        const response = await fetch('{{URL}}/courseOffering', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                // use the val() method to get the value of a form input
                id: $('#deleteCO').val(),
            }),
        });

        // get the HTML text response
        const data = await response.text();
        const modal = '#deleteModal';

        loadResponse(modal, data, !response.ok);
    }

    /**
     * This function handles what happens when a user clicks the "Save" button
     * in the Edit Existing Course Offering modal
     * @returns {Promise<void>}
     */
    async function handleEditCO() {
        const id = $('#editID').val();

        // Store the values of form fields
        let course = $('#eCourse').val();
        let idval = $('#eID').val();
        let name = $('#eName').val();
        let startDate = $('#eStartDate').val();
        let endDate = $('#eEndDate').val();
        let group = $('#eGroup').val();
        let program = $('#eProgram').val();
        let primaryInstructor = $('#eprimaryInstructor').val();
        let alternativeInstructor = $('#ealternativeInstructor').val();
        let term = $('#eTerm').val();

        // Send a PUT request to the router
        const response = await fetch('{{URL}}/courseOffering', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                course: course,
                id: idval,
                name: name,
                startDate: startDate,
                endDate: endDate,
                group: group,
                program: program,
                primaryInstructor: primaryInstructor,
                alternativeInstructor: alternativeInstructor,
                term: term,
            }),
        });

        // Get the HTML text response
        const data = await response.text();
        const modal = '#editModal';

        // Load the response and pass showModal as true if there's an error
        await editLoadResponse(modal, data, !response.ok, {
            course: course,
            idval: idval,
            name: name,
            startDate: startDate,
            endDate: endDate,
            group: group,
            program: program,
            primaryInstructor: primaryInstructor,
            alternativeInstructor: alternativeInstructor,
            term: term,
        });
    }

    /**
     * This function loads a hidden form input in the delete modal with the ID of the term to delete
     * @param idToDelete    - The ID of the term to delete
     */
    function handleDeleteModal(idToDelete) {
        $('#deleteCO').val(idToDelete);
    }

    /**
     * This function loads the form in the Edit Existing Course Offering modal with the information
     * of the term the user wants to edit
     * @param idToEdit    - The ID of the term being edited
     */
    function handleEditModal(idToEdit) {
        $('#eID').val(idToEdit);
        $('#eName').val($(`#${idToEdit}name`).text());
        $('#eStartDate').val($(`#${idToEdit}startDate`).text());
        $('#eEndDate').val($(`#${idToEdit}endDate`).text());
        $('#eGroup').val($(`#${idToEdit}group`).text());
        $('#eTerm').val(document.getElementById(idToEdit + 'term').dataset.termid);
        $('#eCourse').val(document.getElementById(idToEdit + 'course').dataset.courseid);
        $('#eprimaryInstructor').val(document.getElementById(idToEdit + 'primaryInstructor').dataset.primaryinstructorid);
        $('#ealternativeInstructor').val(document.getElementById(idToEdit + 'alternativeInstructor').dataset.alternativeinstructorid);
        $('#eProgram').val(document.getElementById(idToEdit + 'program').dataset.programid);
        checkUpdateEnable();
    }

    /**
     * This function clears the add modal dropdowns
     */
    function handleCreateModal() {
        document.getElementById('cTerm').value = '';
        document.getElementById('cCourse').value = '';
        document.getElementById('cprimaryInstructor').value = null;
        document.getElementById('calternativeInstructor').value = null;
        document.getElementById('cProgram').value = '';
    }

    function handleCreateFail(courseCode, name, startDate, endDate, program, primaryInstructor, alternativeInstructor, term) {
        document.getElementById('cCourse').value = courseCode;
        document.getElementById('cName').value = name;
        document.getElementById('cStartDate').value = startDate;
        document.getElementById('cEndDate').value = endDate;
        document.getElementById('cProgram').value = program;
        document.getElementById('cprimaryInstructor').value = primaryInstructor;
        document.getElementById('calternativeInstructor').value = alternativeInstructor;
        document.getElementById('cTerm').value = term;
    }


    /**
     * As the server gives responses in HTML, the client needs to be able to parse that data.
     * This function replaces the HTML of the current page with the new HTML from the server
     * and pops up the last used modal if there were errors.
     * @param modalID   - The HTML id of the modal to pop up
     * @param data      - The HTML response from the server
     * @param showModal - True to show the modal, false to hide the modal
     */
    function editLoadResponse(modalID, data, showModal, formData) {
        // set the whole document's HTML to be the response
        document.documentElement.innerHTML = data;
        console.log(data);
        // re-add the click handlers
        reLinkButtons();

        // show or hide the modal based on the showModal flag
        const modal = $(modalID);
        if (showModal) {
            modal.modal('show');
            checkEditInstructorMatch();
            checkCreateInstructorMatch();
        } else {
            modal.modal('hide');
        }

        // If there's an error, reset form fields to the stored values
        if (showModal && formData) {
            $('#eCourse').val(formData.course);
            $('#eID').val(formData.idval);
            $('#eName').val(formData.name);
            $('#eStartDate').val(formData.startDate);
            $('#eEndDate').val(formData.endDate);
            $('#eGroup').val(formData.group);
            $('#eProgram').val(formData.program);
            $('#eprimaryInstructor').val(formData.primaryInstructor);
            $('#ealternativeInstructor').val(formData.alternativeInstructor);
            $('#eTerm').val(formData.term);
            checkEditInstructorMatch();
        }
    }

    function loadResponse(modalID, data, showModal) {
        // set the whole document's HTML to be the response
        document.documentElement.innerHTML = data;
        // re-add the click handlers
        reLinkButtons();
        // refresh the modal
        const modal = $(modalID);
        modal.modal('hide');

        // if the response was not ok, pop up the modal
        if (showModal) {
            modal.modal('show');
        }
    }

    function clearErrors() {
        // Clear error messages or styling for input fields
        $('.is-invalid').removeClass('is-invalid');
        $('.invalid-feedback').text('');

        $('#cID').val('');
        $('#cName').val('');
        $('#cStartDate').val('');
        $('#cEndDate').val('');
        $('#cGroup').val('');
    }

</script>

