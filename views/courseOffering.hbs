<div class="container-fluid">
    <h1>{{title}}</h1>
    {{#if listCO}}

        <table class="table table-striped">
            <thead>
            <tr>
                <th>Name</th>
                <th>Group</th>
                <th>Course</th>
                <th>Term</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Primary Instructor</th>
                <th>Alternative Instructor</th>
                <th>Program</th>
                <th>Actions</th>
            </tr>
            </thead>
            <!--Here is where I loop through my array object and add in a <tr> for each loop, and a <td> for each object-->
            <tbody id="tableBody">
            {{#each listCO}}
                <tr>
                    <td id="{{this.id}}name">{{this.name}}</td>
                    <td id="{{this.id}}group">{{this.group}}</td>
                    <td id="{{this.id}}course" data-courseid="{{this.Course.id}}">{{this.Course.courseCode}}</td>
                    <td id="{{this.id}}term" data-termid="{{this.Term.id}}">{{this.Term.title}}</td>
                    <td id="{{this.id}}startDate">{{this.startDate}}</td>
                    <td id="{{this.id}}endDate">{{this.endDate}}</td>
                    <td id="{{this.id}}primaryInstructor"
                        data-primaryInstructorid="{{this.primaryInstructor.id}}">{{this.primaryInstructor.firstName}} {{this.primaryInstructor.lastName}}</td>
                    <td id="{{this.id}}alternativeInstructor"
                        data-primaryInstructorid="{{this.alternativeInstructor.id}}">{{this.alternativeInstructor.firstName}} {{this.alternativeInstructor.lastName}}</td>
                    <td id="{{this.id}}program"
                        data-programid="{{this.Program.id}}">{{this.Program.programAbbreviation}}</td>
                    <td>
                        <button id="{{this.id}}edit" type="button" class="btn btn-primary editButton"
                                data-toggle="modal" data-target="#editModal">Edit
                        </button>
                        <button id="{{this.id}}delete" type="button" class="btn btn-danger deleteButton"
                                data-toggle="modal" data-target="#deleteModal">Delete
                        </button>
                    </td>
                </tr>
            {{/each}}
            </tbody>

        </table>

        <!-- Delete Modal -->
        <div class="modal fade" id="deleteModal" role="dialog" tabindex="-1" aria-labelledby="deleteModalLabel"
             aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title text-danger" id="deleteModalLabel">Delete Course Offering </h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <form action="/courseOffering" method="POST">
                        <div class="modal-body">
                            <p id="deleteModalText">Are you sure you want to delete this Course Offering?</p>
                        </div>

                        <input hidden type="number" id="dID"
                               name="id" value="{{submittedCO.id}}">

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            <button type="button" id="deleteCO" class="btn btn-outline-danger">Delete</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Edit Modal -->
        <div class="modal fade" id="editModal" role="dialog" tabindex="-1" aria-labelledby="editModalLabel"
             aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title text-warning" id="editModalLabel">Edit Existing Course Offering</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <form action="/courseOffering" method="POST">
                        <div class="modal-body">
                            <label hidden for="eID">Course Offering Number:</label>
                            <input hidden type="number"
                                   class="form-control {{#if putErr.id}}is-invalid{{/if}}" id="eID"
                                   name="id" value="{{submittedCO.id}}">
                            <div class="invalid-feedback">{{putErr.id}}</div>
                            <label for="eName">Name:</label>
                            <input type="text" class="form-control {{#if putErr.name}}is-invalid{{/if}}" id="eName"
                                   name="name" value="{{submittedCO.name}}">
                            <div class="invalid-feedback">{{putErr.name}}</div>
                            <div>
                                <label for="eTerm">Term</label>
                                <select id="eTerm" class="form-label" onchange="selectedTermUpdate()">Course
                                    {{#each listTerm}}
                                        <option value="{{id}}" id="optionEditTerm{{id}}" data-termstart="{{startDate}}"
                                                data-termend="{{endDate}}">{{startDate}} - {{termNumber}}</option>
                                    {{/each}}
                                </select>
                            </div>

                            <label for="eStartDate">Start Date:</label>
                            <input type="text" class="form-control {{#if putErr.startDate}}is-invalid{{/if}}"
                                   id="eStartDate"
                                   name="startDate" value="{{submittedCO.startDate}}">
                            <div class="invalid-feedback">{{putErr.startDate}}</div>

                            <label for="eEndDate">End Date:</label>
                            <input type="text" class="form-control {{#if putErr.endDate}}is-invalid{{/if}}"
                                   id="eEndDate"
                                   name="endDate" value="{{submittedCO.endDate}}">
                            <div class="invalid-feedback">{{putErr.endDate}}</div>

                            <label for="eGroup">Group:</label>
                            <input type="text" class="form-control {{#if putErr.group}}is-invalid{{/if}}" id="eGroup"
                                   name="group" value="{{submittedCO.group}}">
                            <div class="invalid-feedback">{{putErr.group}}</div>
                            <div>
                                <label for="eProgram">Program</label>
                                <select id="eProgram" class="form-label" onchange="checkUpdateEnable()">Program
                                    {{#each listProgram}}
                                        <option value="{{id}}">{{programAbbreviation}}</option>
                                    {{/each}}
                                </select>
                            </div>
                            <div>
                                <label for="eprimaryInstructor">Primary Instructor</label>
                                <select id="eprimaryInstructor" class="form-label" onchange="checkUpdateEnable()">Primary
                                    Instructor
                                    {{#each listInstructor}}
                                        <option value="{{id}}">{{lastName}}</option>
                                    {{/each}}
                                </select>
                            </div>
                            <div>
                                <label for="ealternativeInstructor">Alternative Instructor</label>
                                <select id="ealternativeInstructor" class="form-label" onchange="checkUpdateEnable()">Alternative
                                    Instructor
                                    {{#each listInstructor}}
                                        <option value="{{id}}">{{lastName}}</option>
                                    {{/each}}
                                </select>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            <button type="button" id="editCO" class="btn btn-outline-success" disabled>Save</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    {{else}}
        <p>There are no course offerings stored</p>
    {{/if}}
    <!-- Add Modal - must be displayed even if no terms exist -->
    <div class="modal fade" id="addModal" role="dialog" tabindex="-1" aria-labelledby="addModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-success" id="addModalLabel">Create New Course Offering</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <form action="/courseOffering" method="POST">
                    <div class="modal-body">
                        <input hidden type="number"
                               class="form-control {{#if putErr.id}}is-invalid{{/if}}" id="eID"
                               name="ID" value="{{submittedCO.id}}">
                        <div class="invalid-feedback">{{putErr.id}}</div>

                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="cCourse">Course</label>
                                <input id="cCourse" type="text" list="courses" class="form-control"
                                       oninput="selectedCourseCreate()"/>
                                <datalist id="courses">
                                    {{#each listCourse}}
                                        <option id="optionCreateCourse{{courseCode}}"
                                                value="{{courseCode}}" data-courseid="{{id}}"
                                                data-coursename="{{courseName}}" class="dropdown-item"></option>
                                    {{/each}}
                                </datalist>
                                <div class="invalid-feedback" id="cCourseInvalid"></div>
                            </div>
                            <div class="form-group col-md-6">
                                <label for="cName">Name:</label>
                                <input type="text" class="form-control {{#if err.name}}is-invalid{{/if}}" id="cName"
                                       name="name" value="{{submittedCO.name}}">
                                <div class="invalid-feedback">{{err.name}}</div>
                            </div>
                        </div>
                        <div>
                            <label for="cTerm">Term</label>
                            <select id="cTerm" class="form-select" onchange="selectedTermCreate()">Course
                                <option></option>
                                {{#each listTerm}}
                                    <option value="{{id}}" id="optionCreateTerm{{id}}" data-termstart="{{startDate}}"
                                            data-termend="{{endDate}}">{{startDate}} - {{termNumber}}</option>
                                {{/each}}
                            </select>
                        </div>

                        <label for="cStartDate">Start Date:</label>
                        <input type="date" class="form-control {{#if err.startDate}}is-invalid{{/if}}" id="cStartDate"
                               name="startDate" value="{{submittedCO.startDate}}">
                        <div class="invalid-feedback">{{err.startDate}}</div>

                        <label for="cEndDate">End Date:</label>
                        <input type="date" class="form-control {{#if err.endDate}}is-invalid{{/if}}" id="cEndDate"
                               name="endDate" value="{{submittedCO.endDate}}">
                        <div class="invalid-feedback">{{err.endDate}}</div>

                        <div>
                            <label for="cProgram">Program</label>
                            <select id="cProgram" class="form-select" onchange="checkCreateEnable()">Program
                                <option></option>
                                {{#each listProgram}}
                                    <option value="{{id}}">{{programAbbreviation}}</option>
                                {{/each}}
                            </select>
                        </div>
                        <div>
                            <label for="cprimaryInstructor">Primary Instructor</label>
                            <select id="cprimaryInstructor" class="form-select" onchange="checkCreateEnable()">Primary
                                Instructor
                                <option></option>
                                {{#each listInstructor}}
                                    <option value="{{id}}">{{lastName}}</option>
                                {{/each}}
                            </select>
                        </div>
                        <div>
                            <label for="calternativeInstructor">Alternative Instructor</label>
                            <select id="calternativeInstructor" class="form-select" onchange="checkCreateEnable()">Alternative
                                Instructor
                                <option></option>
                                {{#each listInstructor}}
                                    <option value="{{id}}">{{lastName}}</option>
                                {{/each}}
                            </select>
                        </div>

                        <label for="cGroup">Group:</label>
                        <input type="text" class="form-control {{#if err.group}}is-invalid{{/if}}" id="cGroup"
                               name="group" value="{{submittedCO.group}}">
                        <div class="invalid-feedback">{{err.group}}</div>


                        <div class="form-group">
                            <label for="numberOfGroups">Number of corresponding groups to create:</label>
                            <input type="number" id="numberOfGroups" name="numberOfGroups" min="0" max="3" value="0">
                        </div>

                        <div id="correspondingGroups"></div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            <button type="button" id="createCO" class="btn btn-outline-success" disabled>Create</button>
                        </div>
                    </div>

                </form>
            </div>
        </div>
    </div>
    <button type="button" class="btn btn-outline-success" data-toggle="modal" data-target="#addModal"
            id="openCreateModal">Add New Course
        Offering
    </button>
    <a href="{{URL}}">
        <button class="btn btn-success">Return</button>
    </a>
</div>

<script>
    'use strict';
    reLinkButtons();

    document.getElementById('numberOfGroups').addEventListener('input', function() {
        var numberOfGroups = parseInt(this.value);
        var correspondingGroupsDiv = document.getElementById('correspondingGroups');
        correspondingGroupsDiv.innerHTML = ''; // Clear existing inputs

        for (var i = 1; i <= numberOfGroups; i++) {
            var groupLabel = document.createElement('label');
            groupLabel.setAttribute('for', 'correspondingGroup' + i);
            groupLabel.innerText = 'Corresponding Group ' + i + ':';

            var groupInput = document.createElement('input');
            groupInput.setAttribute('type', 'text');
            groupInput.setAttribute('class', 'form-control');
            groupInput.setAttribute('id', 'Corresponding' + i); // Set ID with "Corresponding" prefix and current index
            groupInput.setAttribute('name', 'correspondingGroup' + i);

            var invalidFeedback = document.createElement('div');
            invalidFeedback.setAttribute('class', 'invalid-feedback');
            invalidFeedback.innerText = '{{err.group}}'; // Replace {{err.group}} with your actual error message variable

            correspondingGroupsDiv.appendChild(groupLabel);
            correspondingGroupsDiv.appendChild(groupInput);
            correspondingGroupsDiv.appendChild(invalidFeedback);
        }
    });

    /**
     * This function autofills the name field with the course name when the course is selected
     */
    function selectedCourseCreate() {
        // e.target.dataset.courseName;
        let courseCode = document.getElementById('cCourse').value;
        try {
            document.getElementById('cName').value = document.getElementById('optionCreateCourse' + courseCode).dataset.coursename;
            document.getElementById('cCourseInvalid').innerText = '';
            document.getElementById('cCourse').classList.remove('is-invalid');
        } catch (e) {
            document.getElementById('cCourse').classList.add('is-invalid');
            document.getElementById('cCourseInvalid').innerText = 'Please select a Course Code from the list';
            document.getElementById('cName').value = '';
        }
        checkCreateEnable();
    }

    /**
     * This function autofills the start and end dates with the term start and end dates when the term is selected
     */
    function selectedTermCreate() {
        let termID = document.getElementById('cTerm').value;
        document.getElementById('cStartDate').value = document.getElementById('optionCreateTerm' + termID).dataset.termstart;
        document.getElementById('cEndDate').value = document.getElementById('optionCreateTerm' + termID).dataset.termend;

        checkCreateEnable();
    }

    /**
     * This function checks that each dropdown has an associated property selected
     * and if it does enables the submit button
     */
    function checkCreateEnable() {
        let bTermSelected = document.getElementById('cTerm').value !== '';
        let courseCode = document.getElementById('cCourse').value;
        let bCourseSelected = false;
        try {
            bCourseSelected = document.getElementById('optionCreateCourse' + courseCode).dataset.courseid;
        } catch (e) {
            bCourseSelected = false;
        }
        let bprimaryInstructorSelected = document.getElementById('cprimaryInstructor').value !== '';
        let bProgramSelected = document.getElementById('cProgram').value !== '';

        if (bTermSelected && bProgramSelected && bCourseSelected && bprimaryInstructorSelected) {
            document.getElementById('createCO').removeAttribute('disabled');
        } else {
            document.getElementById('createCO').disabled = 'disabled';
        }
    }

    function selectedTermUpdate() {
        let termID = document.getElementById('eTerm').value;
        document.getElementById('eStartDate').value = document.getElementById('optionEditTerm' + termID).dataset.termstart;
        document.getElementById('eEndDate').value = document.getElementById('optionEditTerm' + termID).dataset.termend;

        checkUpdateEnable();
    }

    /**
     * This method checks that a value has been selected for every dropdown field
     * and if so enables the submit button
     */
    function checkUpdateEnable() {

        let bTermSelected = document.getElementById('eTerm').value !== '';
        let bprimaryInstructorSelected = document.getElementById('eprimaryInstructor').value !== '';
        let bProgramSelected = document.getElementById('eProgram').value !== '';

        if (bTermSelected && bProgramSelected && bprimaryInstructorSelected) {
            document.getElementById('editCO').removeAttribute('disabled');
        } else {
            document.getElementById('editCO').disabled = 'disabled';
        }
    }

    /**
     * This function links the buttons on the page to their appropriate handlers
     */
    function reLinkButtons() {
        $('#createCO').click(handleCreateCO);
        $('#deleteCO').click(handleDeleteCO);
        $('#editCO').click(handleEditCO);
        $('.deleteButton').click(function() {
            handleDeleteModal(this.id.replace('delete', ''));
        });
        $('#openCreateModal').click(handleCreateModal);

        $('.editButton').click(function() {
            handleEditModal(this.id.replace('edit', ''));
        });
        $('.modal').on('hidden.bs.modal', function() {
            clearErrors();
        });
    }

    /**
     * This function handles what happens when a user clicks the "create" button
     * in the Create New Course Offering modal
     * @returns {Promise<void>}
     */
    async function handleCreateCO() {
        let courseCode = document.getElementById('cCourse').value;
        let courseID = document.getElementById('optionCreateCourse' + courseCode).dataset.courseid;

        const response = await fetch('{{URL}}/courseOffering', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                // use the val() method to get the value of a form input
                name: $('#cName').val(),
                startDate: $('#cStartDate').val(),
                endDate: $('#cEndDate').val(),
                group: $('#cGroup').val(),
                course: courseID,
                program: $('#cProgram').val(),
                primaryInstructor: $('#cprimaryInstructor').val(),
                alternativeInstructor: $('#calternativeInstructor').val(),
                term: $('#cTerm').val(),
            }),
        });

        // get the HTML text response
        const data = await response.text();
        const modal = '#addModal';

        loadResponse(modal, data, !response.ok);
    }

    /**
     * This function handles what happens when a user clicks the "Delete" button
     * in the Delete Course Offering modal
     * @returns {Promise<void>}
     */
    async function handleDeleteCO() {
        // send a DELETE request to the router
        const response = await fetch('{{URL}}/courseOffering', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                // use the val() method to get the value of a form input
                id: $('#deleteCO').val(),
            }),
        });

        // get the HTML text response
        const data = await response.text();
        const modal = '#deleteModal';

        loadResponse(modal, data, !response.ok);
    }

    /**
     * This function handles what happens when a user clicks the "Save" button
     * in the Edit Existing Course Offering modal
     * @returns {Promise<void>}
     */
    async function handleEditCO() {
        const id = $('#editID').val();
        // send a PUT request to the router
        const response = await fetch('{{URL}}/courseOffering', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                // use the val() method to get the value of a form input
                course: $('#eCourse').val(),
                id: $('#eID').val(),
                name: $('#eName').val(),
                startDate: $('#eStartDate').val(),
                endDate: $('#eEndDate').val(),
                group: $('#eGroup').val(),
                program: $('#eProgram').val(),
                primaryInstructor: $('#eprimaryInstructor').val(),
                alternativeInstructor: $('#ealternativeInstructor').val(),
                term: $('#eTerm').val(),
            }),
        });

        // get the HTML text response
        const data = await response.text();
        const modal = '#editModal';

        loadResponse(modal, data, !response.ok);
    }

    /**
     * This function loads a hidden form input in the delete modal with the ID of the term to delete
     * @param idToDelete    - The ID of the term to delete
     */
    function handleDeleteModal(idToDelete) {
        $('#deleteCO').val(idToDelete);
    }

    /**
     * This function loads the form in the Edit Existing Course Offering modal with the information
     * of the term the user wants to edit
     * @param idToEdit    - The ID of the term being edited
     */
    function handleEditModal(idToEdit) {
        $('#eID').val(idToEdit);
        $('#eName').val($(`#${idToEdit}name`).text());
        $('#eStartDate').val($(`#${idToEdit}startDate`).text());
        $('#eEndDate').val($(`#${idToEdit}endDate`).text());
        $('#eGroup').val($(`#${idToEdit}group`).text());
        $('#eTerm').val(document.getElementById(idToEdit + 'term').dataset.termid);
        $('#eCourse').val(document.getElementById(idToEdit + 'course').dataset.courseid);
        $('#eprimaryInstructor').val(document.getElementById(idToEdit + 'primaryInstructor').dataset.primaryInstructorid);
        $('#ealternativeInstructor').val(document.getElementById(idToEdit + 'primaryInstructor').dataset.alternativeInstructorid);
        $('#eProgram').val(document.getElementById(idToEdit + 'program').dataset.programid);

        checkUpdateEnable();
    }

    /**
     * This function clears the add modal dropdowns
     */
    function handleCreateModal() {
        document.getElementById('cTerm').value = '';
        document.getElementById('cCourse').value = '';
        document.getElementById('cprimaryInstructor').value = '';
        document.getElementById('calternativeInstructor').value = '';
        document.getElementById('cProgram').value = '';

    }

    /**
     * As the server gives responses in HTML, the client needs to be able to parse that data.
     * This function replaces the HTML of the current page with the new HTML from the server
     * and pops up the last used modal if there were errors.
     * @param modalID   - The HTML id of the modal to pop up
     * @param data      - The HTML response from the server
     * @param showModal - True to show the modal, false to hide the modal
     */
    function loadResponse(modalID, data, showModal) {
        // set the whole document's HTML to be the response
        document.documentElement.innerHTML = data;
        // re-add the click handlers
        reLinkButtons();
        // refresh the modal
        const modal = $(modalID);
        modal.modal('hide');

        // if the response was not ok, pop up the modal
        if (showModal) {
            modal.modal('show');
        }
    }

    function clearErrors() {
        // Clear error messages or styling for input fields
        $('.is-invalid').removeClass('is-invalid');
        $('.invalid-feedback').text('');

        $('#cID').val('');
        $('#cName').val('');
        $('#cStartDate').val('');
        $('#cEndDate').val('');
        $('#cGroup').val('');
    }

</script>
