{{#if instructorName}}
    <div>
        <div class="row">
            <div class="col-9">
                <h2><i>Instructor Report For:</i> {{#if instructorName}}
       {{instructorName.lastName}}, {{instructorName.firstName}}
                {{/if}}</h2>
            </div>
            <div class="col-3">
                <small>Report Generated: {{dateGen}}</small>
            </div>
        </div>
    </div>
    <table class="table table-bordered table-hover">
        <thead>

        <tr>
<!--            <th class="text-center" scope="col">Time</th>-->
            <th class="text-center" scope="col">Monday</th>
            <th class="text-center" scope="col">Tuesday</th>
            <th class="text-center" scope="col">Wednesday</th>
            <th class="text-center" scope="col">Thursday</th>
            <th class="text-center" scope="col">Friday</th>
        </tr>
        </thead>
        <tbody>
<!--        TODO PLACE TWO LOOPS FOR TIMESLOT LIST AND DAY LIST - CODE TIMESLOT TO RUN IN CONJUNCTION WITH THE DAY LOOP-->
<!--        TODO establish a 2d array before sending it via render to this hbs view-->
    {{#each matrixTable}}
                <tr>
<!--                    <td class="text-center">-->
<!--                       8:00-->
<!--                    </td>-->

<!-- innerloop starts here-->
                    {{#each this}}
                        {{#if this.timeSlot.startTime}}
                            <td>{{../../program}}<br>{{this.timeSlot.startTime}}</td>
                    {{else}}
                        <td></td>
                    {{/if}}

                {{/each}}
<!--                    <td></td>-->
<!--                    <td></td>-->
<!--                    <td></td>-->
<!--                    <td></td>-->
<!--                    <td></td>-->
                </tr>
    {{/each}}
        </tbody>
    </table>

<!-- instructorReport -->
{{else}}
    <h1 id="nothingToShow">Nothing to display at the moment</h1>
{{/if}}

<p>{{program}}</p>

<!-- modal -->
<!-- Vertically centered scrollable modal -->
<div class="modal fade" id="instructorReportModal" tabindex="-1" aria-labelledby="instructorReportModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="instructorReportModalLabel">Create an Instructor Report For: </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
<!--           MODAL FORM CONTENTS ENCLOSED IN MODAL-BODY -->
            <div class="modal-body">
<!--                form begins here-->
                <form method="POST" action="/instructorReport">
                    <small class="text-info"> <b>Please select both an instructor and a term.</b></small>
                    <div class="form-group">
                        <label for="selectInstructorInstructorReport" class="form-label mt-4">Instructors</label>
                        <select name="selectInstructorReport" class="form-select" id="selectInstructorInstructorReport" required>
                            <option value="" disabled selected>Select Instructor</option>
                            {{#each instructorList}}
                                <option value="{{this.id}}">{{this.lastName}}, {{this.firstName}}</option>
                            {{/each}}
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="selectTermInstructorReport" class="form-label mt-4">Terms</label>
                        <select name="selectTermInstructorReport" class="form-select" id="selectTermInstructorReport" required>
                            <option value="" disabled selected>Select Term</option>
                            {{#each termList}}
                                <option value="{{this.id}}">{{this.displayTerm}}</option>
                            {{/each}}
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-danger" data-bs-dismiss="modal">Close</button>
                        <button id="submitBtn"
                                type="submit" class="btn btn-outline-success" >Save changes</button>
                    </div>
                </form>
<!--                Form ends here-->

            </div>
        </div>
    </div>
</div>
<div class="btnPairsCustom">
    <button id="newInstructorReportBtn" type="button" class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#instructorReportModal">
        New Report</button>
    <button class="btn btn-outline-success" onclick="window.print()">Print this page</button>
</div>
<script defer>
    'use strict';
    // $('#createAbbr').val("");
    // $('#createName').val("");


    let submitBtn;
    let selectedInstructor;
    let selectedTerm;
    // On arrival the modal will open
    window.onload = function(){
         submitBtn= document.getElementById("submitBtn");
         selectedInstructor = document.getElementById("selectInstructorInstructorReport");
        selectedTerm = document.getElementById("selectTermInstructorReport");
        const modal = new bootstrap.Modal(document.getElementById("instructorReportModal"));
        submitBtn.disabled = true;

        {{#if showModal}}
            modal.show();
        {{/if}}



        selectedInstructor.onchange = checkFormSelections;
        selectedTerm.onchange = checkFormSelections;
    }


    function checkFormSelections(){
      console.log(selectedInstructor.value);
        if(selectedInstructor.value !== ""  && selectedTerm.value !== "")
        {
            submitBtn.disabled = false;
        }
        else{
            submitBtn.disabled = true;
        }
    }


    // TODO determine ways to avoid a hardcoded form submit
    async function handleCreateProgram() {
        // send a POST request to the router
        const response = await fetch('http://localhost:3000/instructorReport', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                // use the val() method to get the value of a form input
                instructor: selectedInstructor.value,
                term: selectedTerm.value,

            }),
        });

        // get the HTML text response
        const data = await response.text();

        // set the whole document's HTML to be the response
        document.documentElement.innerHTML = data;
        // re-add the click handler
        $('#createProgram').click(handleCreateProgram);
        // refresh the modal
        const modal = $('#addModal');
        modal.modal('hide');

        // if the response was not ok, pop up the modal
        if (!response.ok) {
            modal.modal('show');
        }
    }

    // selectedInstructor.addEventListener("change", function(){
    //         checkFormSelections();
    // });
    // selectedInstructor.onchange = checkFormSelections;
    // selectedTerm.onchange = checkFormSelections;

    // selectedTerm.addEventListener("change", function(){
    //     checkFormSelections();
    // });



    // async function handleCreateInstructorReport() {
    //     // send a POST request to the router
    //     const response = await fetch('http://localhost:3000/InstructorReport', {
    //         method: 'POST',
    //         headers: {
    //             'Content-Type': 'application/json',
    //         },
    //         body: JSON.stringify({
    //             // use the val() method to get the value of a form input
    //             programName: $('#createName').val(),
    //             programAbbreviation: $('#createAbbr').val(),
    //
    //         }),
    //     });


</script>

